# Aula 3: Ferramentas (Tools) e Processos (Processes) no CrewAI
# Objetivo: Aprender a equipar agentes com ferramentas e comparar processos

from crewai import Agent, Task, Crew, Process
from dotenv import load_dotenv
import time
import os
import requests
from bs4 import BeautifulSoup
from pathlib import Path

# Carrega as vari√°veis de ambiente do arquivo .env
load_dotenv()

print("üéØ Aula 3: Ferramentas e Processos no CrewAI")
print("=" * 50)

# --- PARTE 1: SIMULA√á√ÉO DE FERRAMENTAS ---
print("üîß Configurando ferramentas simuladas...")

# Simula√ß√£o de ferramentas usando bibliotecas nativas
def simular_busca_web(query):
    """Simula uma busca na web"""
    return f"Resultados simulados para: {query}. CrewAI √© um framework..."

def simular_scraping(url):
    """Simula extra√ß√£o de conte√∫do de website"""
    return f"Conte√∫do simulado de {url}: Artigo sobre CrewAI e suas capacidades..."

def simular_leitura_arquivo(filepath):
    """Simula leitura de arquivo"""
    return f"Conte√∫do simulado do arquivo {filepath}: Dados de exemplo..."

print("‚úÖ Simula√ß√µes de ferramentas configuradas:")
print("‚úÖ Busca Web Simulada")
print("‚úÖ Scraping Simulado") 
print("‚úÖ Leitura de Arquivo Simulada")

# --- PARTE 2: AGENTES COM FERRAMENTAS ---

# Agente Pesquisador equipado com ferramentas de busca
pesquisador_com_ferramentas = Agent(
    role='Pesquisador Web Avan√ßado',
    goal='Coletar informa√ß√µes precisas e atualizadas usando ferramentas de busca na web',
    backstory="""Voc√™ √© um pesquisador especializado que utiliza ferramentas
    avan√ßadas para coletar informa√ß√µes da web. Voc√™ sabe como fazer buscas
    eficientes, extrair conte√∫do relevante de sites e validar a qualidade
    das fontes encontradas. Sempre cita suas fontes e verifica a 
    credibilidade das informa√ß√µes.""",
    verbose=True,
    allow_delegation=False
)

# Agente Redator
redator_especializado = Agent(
    role='Redator T√©cnico Especializado',
    goal='Criar conte√∫do t√©cnico claro e bem estruturado baseado em pesquisas',
    backstory="""Voc√™ √© um redator t√©cnico experiente que transforma
    informa√ß√µes complexas em conte√∫do acess√≠vel e bem organizado.
    Sua especialidade √© criar artigos t√©cnicos, documenta√ß√£o e relat√≥rios
    que sejam tanto informativos quanto envolventes. Voc√™ sempre organiza
    o conte√∫do de forma l√≥gica e inclui exemplos pr√°ticos.""",
    verbose=True,
    allow_delegation=False
)

# Agente Revisor
revisor_critico = Agent(
    role='Revisor Cr√≠tico e Analista',
    goal='Analisar e validar a qualidade do conte√∫do produzido',
    backstory="""Voc√™ √© um revisor experiente com olhar cr√≠tico para
    qualidade de conte√∫do. Sua fun√ß√£o √© analisar textos em busca de
    inconsist√™ncias, erros factuais, problemas de estrutura e
    oportunidades de melhoria. Voc√™ fornece feedback construtivo
    e sugest√µes espec√≠ficas para aprimoramento.""",
    verbose=True,
    allow_delegation=False
)

# --- PARTE 3: DEFINI√á√ÉO DAS TAREFAS ---

tarefa_pesquisa_web = Task(
    description="""Use as ferramentas de busca para pesquisar informa√ß√µes 
    atualizadas sobre 'CrewAI framework para m√∫ltiplos agentes'. Foque em:
    
    1. Caracter√≠sticas principais do framework
    2. Vantagens em rela√ß√£o a outras solu√ß√µes
    3. Casos de uso pr√°ticos e exemplos
    4. Melhores pr√°ticas de implementa√ß√£o
    
    Use a ferramenta de busca para encontrar artigos relevantes e, se necess√°rio,
    use a ferramenta de scraping para extrair conte√∫do detalhado dos sites
    mais promissores.""",
    expected_output="""Um relat√≥rio de pesquisa estruturado contendo:
    - Lista de caracter√≠sticas principais (m√≠nimo 5)
    - Compara√ß√£o com outras ferramentas (pelo menos 2)
    - 3 casos de uso pr√°ticos com exemplos
    - Lista de melhores pr√°ticas (m√≠nimo 4)
    - Links das fontes utilizadas
    - Avalia√ß√£o da credibilidade de cada fonte""",
    agent=pesquisador_com_ferramentas
)

tarefa_redacao_tecnica = Task(
    description="""Com base na pesquisa realizada, crie um artigo t√©cnico
    abrangente sobre CrewAI. O artigo deve:
    
    1. Come√ßar com uma introdu√ß√£o atrativa
    2. Explicar o que √© CrewAI e seus benef√≠cios
    3. Apresentar casos de uso pr√°ticos
    4. Incluir uma se√ß√£o de melhores pr√°ticas
    5. Terminar com conclus√µes e pr√≥ximos passos
    
    Use linguagem t√©cnica mas acess√≠vel, inclua exemplos pr√°ticos e
    organize o conte√∫do de forma l√≥gica e envolvente.""",
    expected_output="""Um artigo t√©cnico de 1000-1200 palavras com:
    - T√≠tulo atrativo e subt√≠tulos organizados
    - Introdu√ß√£o que desperta interesse (100-150 palavras)
    - Se√ß√µes bem estruturadas com exemplos pr√°ticos
    - Lista de melhores pr√°ticas formatada
    - Conclus√£o com pr√≥ximos passos sugeridos
    - Linguagem t√©cnica mas acess√≠vel""",
    agent=redator_especializado
)

tarefa_revisao_critica = Task(
    description="""Revise criticamente o artigo produzido, analisando:
    
    1. Qualidade e precis√£o das informa√ß√µes
    2. Clareza e organiza√ß√£o do conte√∫do
    3. Adequa√ß√£o ao p√∫blico t√©cnico
    4. Completude das informa√ß√µes
    5. Qualidade da escrita e gram√°tica
    
    Forne√ßa feedback espec√≠fico e construtivo, destacando pontos fortes
    e √°reas que precisam de melhoria.""",
    expected_output="""Uma an√°lise cr√≠tica detalhada contendo:
    - Avalia√ß√£o geral da qualidade (nota de 1-10)
    - Lista de pontos fortes identificados (m√≠nimo 3)
    - Lista de pontos a melhorar com sugest√µes espec√≠ficas
    - Coment√°rios sobre a adequa√ß√£o ao p√∫blico-alvo
    - Sugest√µes de melhorias na estrutura ou conte√∫do
    - Verifica√ß√£o de precis√£o das informa√ß√µes t√©cnicas""",
    agent=revisor_critico
)

# --- PARTE 4: PROCESSO SEQUENCIAL ---

print("\nüîÑ DEMONSTRA√á√ÉO: Processo Sequencial")
print("-" * 40)

crew_sequencial = Crew(
    agents=[pesquisador_com_ferramentas, redator_especializado, revisor_critico],
    tasks=[tarefa_pesquisa_web, tarefa_redacao_tecnica, tarefa_revisao_critica],
    process=Process.sequential,  # Execu√ß√£o sequencial - uma tarefa por vez
    verbose=True
)

print("üìã Processo Sequencial configurado:")
print("   1Ô∏è‚É£ Pesquisador ‚Üí Coleta informa√ß√µes")
print("   2Ô∏è‚É£ Redator ‚Üí Cria artigo")
print("   3Ô∏è‚É£ Revisor ‚Üí Analisa qualidade")
print("   ‚è∞ Execu√ß√£o: Uma tarefa por vez, em ordem")

# --- PARTE 5: PROCESSO HIER√ÅRQUICO ---

print("\nüèóÔ∏è DEMONSTRA√á√ÉO: Processo Hier√°rquico")
print("-" * 40)

# Para o processo hier√°rquico, precisamos de um agente manager
manager_projeto = Agent(
    role='Gerente de Projeto Editorial',
    goal='Coordenar e otimizar o trabalho da equipe editorial',
    backstory="""Voc√™ √© um gerente experiente que coordena equipes editoriais.
    Sua expertise est√° em delegar tarefas eficientemente, garantir qualidade
    e otimizar o fluxo de trabalho. Voc√™ entende as capacidades de cada
    membro da equipe e sabe como aproveitar melhor seus talentos.""",
    verbose=True,
    allow_delegation=True
)

# Tarefas para processo hier√°rquico (mais gen√©ricas)
tarefa_projeto_editorial = Task(
    description="""Coordene a produ√ß√£o de um artigo t√©cnico sobre CrewAI,
    delegando tarefas apropriadas para a equipe:
    
    - Atribua pesquisa para quem tem ferramentas adequadas
    - Delegue reda√ß√£o para especialista em conte√∫do t√©cnico
    - Solicite revis√£o cr√≠tica para garantir qualidade
    
    Monitore o progresso e garanta que o resultado final atenda aos
    padr√µes de qualidade estabelecidos.""",
    expected_output="""Um artigo t√©cnico completo e revisado sobre CrewAI
    com pesquisa fundamentada, reda√ß√£o clara e qualidade validada.""",
    agent=manager_projeto
)

crew_hierarquico = Crew(
    agents=[manager_projeto, pesquisador_com_ferramentas, redator_especializado, revisor_critico],
    tasks=[tarefa_projeto_editorial],
    process=Process.hierarchical,  # Processo hier√°rquico com delega√ß√£o
    manager_llm='gpt-4',  # LLM para o manager (pode usar gpt-3.5-turbo se preferir)
    verbose=True
)

print("üìã Processo Hier√°rquico configurado:")
print("   üë®‚Äçüíº Manager ‚Üí Coordena e delega")
print("   üîÑ Agentes ‚Üí Executam tarefas delegadas")
print("   ‚ö° Execu√ß√£o: Otimizada com delega√ß√£o inteligente")

# --- PARTE 6: COMPARA√á√ÉO DOS PROCESSOS ---

def executar_processo_sequencial():
    print("\n" + "="*60)
    print("üöÄ EXECUTANDO PROCESSO SEQUENCIAL")
    print("="*60)
    
    inicio = time.time()
    try:
        resultado_seq = crew_sequencial.kickoff()
        tempo_seq = time.time() - inicio
        
        print(f"\n‚è±Ô∏è Processo Sequencial executado em: {tempo_seq:.2f} segundos")
        print("\nüìä RESULTADO DO PROCESSO SEQUENCIAL:")
        print("-" * 50)
        print(resultado_seq)
        
        return resultado_seq, tempo_seq
    except Exception as e:
        print(f"‚ùå Erro no processo sequencial: {e}")
        return None, 0

def executar_processo_hierarquico():
    print("\n" + "="*60)
    print("üöÄ EXECUTANDO PROCESSO HIER√ÅRQUICO")  
    print("="*60)
    
    inicio = time.time()
    try:
        resultado_hier = crew_hierarquico.kickoff()
        tempo_hier = time.time() - inicio
        
        print(f"\n‚è±Ô∏è Processo Hier√°rquico executado em: {tempo_hier:.2f} segundos")
        print("\nüìä RESULTADO DO PROCESSO HIER√ÅRQUICO:")
        print("-" * 50)
        print(resultado_hier)
        
        return resultado_hier, tempo_hier
    except Exception as e:
        print(f"‚ùå Erro no processo hier√°rquico: {e}")
        return None, 0

# --- EXECU√á√ÉO PRINCIPAL ---

if __name__ == "__main__":
    print("\nüé¨ INICIANDO DEMONSTRA√á√ÉO COMPLETA")
    print("=" * 50)
    
    # Verificar se temos as chaves necess√°rias
    openai_key = os.getenv('OPENAI_API_KEY')
    serper_key = os.getenv('SERPER_API_KEY')
    
    print("üîë Verificando configura√ß√µes:")
    print(f"   OpenAI API Key: {'‚úÖ Configurada' if openai_key else '‚ùå Faltando'}")
    print(f"   Serper API Key: {'‚úÖ Configurada' if serper_key else '‚ùå Faltando'}")
    
    if not openai_key:
        print("\n‚ùå ERRO: Chave da OpenAI n√£o encontrada!")
        print("Configure a vari√°vel OPENAI_API_KEY no arquivo .env")
        exit(1)
        
    if not serper_key:
        print("\n‚ö†Ô∏è AVISO: Chave do Serper n√£o encontrada!")
        print("Algumas ferramentas de busca podem n√£o funcionar.")
        print("Configure SERPER_API_KEY em https://serper.dev/")
        
    # Menu de escolha
    print("\nüìã ESCOLHA O PROCESSO PARA EXECUTAR:")
    print("1Ô∏è‚É£ - Processo Sequencial (recomendado para iniciantes)")
    print("2Ô∏è‚É£ - Processo Hier√°rquico (mais avan√ßado)")
    print("3Ô∏è‚É£ - Comparar ambos os processos (demora mais)")
    print("4Ô∏è‚É£ - Apenas demonstrar conceitos (sem executar)")
    
    escolha = input("\nDigite sua escolha (1-4): ").strip()
    
    if escolha == "1":
        resultado_seq, tempo_seq = executar_processo_sequencial()
        
    elif escolha == "2":
        resultado_hier, tempo_hier = executar_processo_hierarquico()
        
    elif escolha == "3":
        print("\nüîÑ Executando compara√ß√£o completa...")
        resultado_seq, tempo_seq = executar_processo_sequencial()
        resultado_hier, tempo_hier = executar_processo_hierarquico()
        
        # Compara√ß√£o final
        print("\n" + "="*60)
        print("üìä COMPARA√á√ÉO FINAL DOS PROCESSOS")
        print("="*60)
        
        print(f"‚è±Ô∏è Tempo de Execu√ß√£o:")
        print(f"   Sequencial: {tempo_seq:.2f}s")
        print(f"   Hier√°rquico: {tempo_hier:.2f}s")
        print(f"   Diferen√ßa: {abs(tempo_seq - tempo_hier):.2f}s")
        
        print(f"\nüéØ Caracter√≠sticas:")
        print(f"   Sequencial: Previs√≠vel, linear, ideal para fluxos claros")
        print(f"   Hier√°rquico: Flex√≠vel, otimizado, ideal para projetos complexos")
        
    elif escolha == "4":
        print("\nüìö CONCEITOS DEMONSTRADOS (sem execu√ß√£o):")
        print("=" * 50)
        
        print("\nüîß FERRAMENTAS (TOOLS):")
        print("‚Ä¢ Simula√ß√£o de Busca Web - Busca inteligente simulada")
        print("‚Ä¢ Simula√ß√£o de Scraping - Extra√ß√£o de conte√∫do simulada")
        print("‚Ä¢ Simula√ß√£o de Leitura - Leitura de arquivos simulada")
        print("‚Ä¢ Agentes podem usar m√∫ltiplas ferramentas")
        print("‚Ä¢ Ferramentas expandem capacidades dos agentes")
        
        print("\nüîÑ PROCESSOS:")
        print("‚Ä¢ SEQUENCIAL:")
        print("  - Execu√ß√£o linear, uma tarefa por vez")
        print("  - Previs√≠vel e f√°cil de debugar") 
        print("  - Ideal para fluxos bem definidos")
        print("  - Menor complexidade de coordena√ß√£o")
        
        print("‚Ä¢ HIER√ÅRQUICO:")
        print("  - Manager coordena e delega tarefas")
        print("  - Execu√ß√£o otimizada e paralela quando poss√≠vel")
        print("  - Ideal para projetos complexos")
        print("  - Requer LLM para o manager")
        
        print("\nüí° QUANDO USAR CADA UM:")
        print("‚Ä¢ Sequencial: Projetos simples, fluxos lineares, aprendizado")
        print("‚Ä¢ Hier√°rquico: Projetos complexos, otimiza√ß√£o, produ√ß√£o")
        
    else:
        print("‚ùå Escolha inv√°lida! Execute novamente o script.")
        
    # Li√ß√µes aprendidas
    print("\n" + "="*60)
    print("üéì LI√á√ïES DA AULA 3:")
    print("="*60)
    print("‚úÖ Aprendemos a equipar agentes com ferramentas")
    print("‚úÖ Vimos como ferramentas expandem capacidades")
    print("‚úÖ Comparamos processos Sequencial vs Hier√°rquico")
    print("‚úÖ Entendemos quando usar cada tipo de processo")
    print("‚úÖ Exploramos coordena√ß√£o avan√ßada com managers")
    
    print("\nüéØ Pr√≥xima aula: Arquitetura de Chatbots Multi-Agente!")
    
    print("\nüí° DICA IMPORTANTE:")
    print("Ferramentas s√£o o que tornam os agentes realmente poderosos!")
    print("Experimente diferentes combina√ß√µes e veja os resultados.")
    
print("\nüèÅ Aula 3 conclu√≠da com sucesso!")