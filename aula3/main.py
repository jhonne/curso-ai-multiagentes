# Aula 3: Ferramentas (Tools) e Processos (Processes) no CrewAI
# Objetivo: Aprender a equipar agentes com ferramentas e comparar processos

from crewai import Agent, Task, Crew, Process
from crewai.tools import BaseTool
from dotenv import load_dotenv
import time
import os
from typing import Type
from pydantic import BaseModel, Field

# Carrega as vari√°veis de ambiente do arquivo .env
load_dotenv()

print("üéØ Aula 3: Ferramentas e Processos no CrewAI")
print("=" * 50)

# --- PARTE 1: FERRAMENTAS REAIS DO CREWAI ---
print("üîß Configurando ferramentas do CrewAI...")


# Schema para entrada da ferramenta de busca
class BuscaWebInput(BaseModel):
    query: str = Field(description="Termo de busca para pesquisar na web")


# Schema para entrada da ferramenta de scraping
class ScrapingInput(BaseModel):
    url: str = Field(description="URL do site para extrair conte√∫do")


# Schema para entrada da ferramenta de leitura
class LeituraArquivoInput(BaseModel):
    filepath: str = Field(description="Caminho do arquivo para ler")


# Ferramenta de Busca Web
class BuscaWebTool(BaseTool):
    name: str = "busca_web"
    description: str = "Ferramenta para buscar informa√ß√µes na web sobre um t√≥pico espec√≠fico"
    args_schema: Type[BaseModel] = BuscaWebInput
    
    def _run(self, query: str) -> str:
        """Executa busca web simulada com conte√∫do realista"""
        # Simula√ß√£o mais realista de uma busca sobre CrewAI
        resultados = f"""
üîç RESULTADOS DA BUSCA PARA: {query}

üìÑ FONTES ENCONTRADAS:
1. CrewAI Official Documentation - https://docs.crewai.com
   Framework Python para orquestra√ß√£o de agentes IA aut√¥nomos
   
2. GitHub - joaomdmoura/crewAI - https://github.com/joaomdmoura/crewai
   Cutting-edge framework for orchestrating role-playing AI agents
   
3. CrewAI Tutorial - Medium - https://medium.com/@crewai
   Como criar equipes de IA colaborativa com CrewAI

üí° PRINCIPAIS CARACTER√çSTICAS:
- Framework para m√∫ltiplos agentes IA
- Agentes com roles espec√≠ficos
- Processo colaborativo e sequencial
- Suporte a ferramentas customizadas
- Delega√ß√£o hier√°rquica de tarefas

üéØ CASOS DE USO:
- An√°lise de conte√∫do
- Pesquisa automatizada
- Gera√ß√£o de relat√≥rios
- Automa√ß√£o de workflows
"""
        return resultados


# Ferramenta de Scraping
class ScrapingTool(BaseTool):
    name: str = "scraping_web"
    description: str = "Ferramenta para extrair conte√∫do detalhado de p√°ginas web"
    args_schema: Type[BaseModel] = ScrapingInput
    
    def _run(self, url: str) -> str:
        """Executa scraping simulado com conte√∫do estruturado"""
        conteudo = f"""
üìÑ CONTE√öDO EXTRA√çDO DE: {url}

üè∑Ô∏è T√çTULO: CrewAI - Framework para Agentes IA Colaborativos

üìù RESUMO:
CrewAI √© um framework Python revolucion√°rio que permite criar equipes 
de agentes IA que trabalham juntos de forma coordenada. Cada agente 
tem um papel espec√≠fico e pode colaborar com outros para completar 
tarefas complexas.

üîß FUNCIONALIDADES PRINCIPAIS:
‚Ä¢ Defini√ß√£o de agentes com roles espec√≠ficos
‚Ä¢ Sistema de tarefas interconectadas
‚Ä¢ Processos sequenciais e hier√°rquicos
‚Ä¢ Integra√ß√£o com ferramentas externas
‚Ä¢ Comunica√ß√£o entre agentes
‚Ä¢ Delega√ß√£o inteligente de responsabilidades

‚≠ê VANTAGENS:
‚Ä¢ Modularidade e reutiliza√ß√£o
‚Ä¢ Escalabilidade para projetos complexos
‚Ä¢ Flexibilidade na defini√ß√£o de workflows
‚Ä¢ Suporte a m√∫ltiplos LLMs
‚Ä¢ F√°cil integra√ß√£o com APIs existentes

üìä ESTAT√çSTICAS:
‚Ä¢ +10k stars no GitHub
‚Ä¢ Comunidade ativa de desenvolvedores
‚Ä¢ Documenta√ß√£o abrangente
‚Ä¢ Exemplos pr√°ticos dispon√≠veis
"""
        return conteudo


# Ferramenta de Leitura de Arquivo
class LeituraArquivoTool(BaseTool):
    name: str = "leitura_arquivo"
    description: str = "Ferramenta para ler e analisar conte√∫do de arquivos"
    args_schema: Type[BaseModel] = LeituraArquivoInput
    
    def _run(self, filepath: str) -> str:
        """Executa leitura simulada de arquivo com dados estruturados"""
        conteudo = f"""
üìÅ ARQUIVO ANALISADO: {filepath}

üìã METADADOS:
‚Ä¢ Tipo: Documento t√©cnico
‚Ä¢ Tamanho: 2.5 KB
‚Ä¢ √öltima modifica√ß√£o: 2025-08-25
‚Ä¢ Encoding: UTF-8

üìÑ CONTE√öDO ESTRUTURADO:

=== DADOS DE CONFIGURA√á√ÉO ===
Framework: CrewAI v0.28.8
Python: 3.8+
Depend√™ncias: 
- langchain
- openai
- pydantic

=== EXEMPLOS DE USO ===
1. Agente de Pesquisa:
   - Role: Researcher
   - Goal: Coletar informa√ß√µes precisas
   - Tools: Web search, File reader

2. Agente de An√°lise:
   - Role: Analyst
   - Goal: Processar e interpretar dados
   - Tools: Data processing, Statistics

3. Agente de Reda√ß√£o:
   - Role: Writer
   - Goal: Criar conte√∫do estruturado
   - Tools: Text generation, Formatting

=== MELHORES PR√ÅTICAS ===
‚Ä¢ Definir roles claros para cada agente
‚Ä¢ Usar expected_output espec√≠fico
‚Ä¢ Implementar tratamento de erros
‚Ä¢ Monitorar uso de tokens
‚Ä¢ Testar com dados simulados primeiro
"""
        return conteudo


# Instanciando as ferramentas
busca_web_tool = BuscaWebTool()
scraping_tool = ScrapingTool()
leitura_arquivo_tool = LeituraArquivoTool()

print("‚úÖ Ferramentas CrewAI configuradas:")
print("üîç Busca Web - Pesquisa inteligente na web")
print("üåê Scraping - Extra√ß√£o de conte√∫do de sites")
print("üìÅ Leitura de Arquivo - An√°lise de documentos")

# --- PARTE 2: AGENTES COM FERRAMENTAS INTEGRADAS ---

# Configura√ß√µes din√¢micas do sistema carregadas do .env
CONFIG_SISTEMA = {
    'modelo_economico': os.getenv('OPENAI_MODEL_ECONOMICO', 'gpt-3.5-turbo'),
    'modelo_premium': os.getenv('OPENAI_MODEL_NAME', 'gpt-4'),
    'max_tokens': int(os.getenv('OPENAI_MAX_TOKENS', '2000')),
    'temperature': float(os.getenv('OPENAI_TEMPERATURE', '0.7')),
    'timeout': int(os.getenv('OPENAI_TIMEOUT', '120'))
}

# Fun√ß√£o para exibir configura√ß√µes carregadas
def exibir_configuracoes():
    print("‚öôÔ∏è  CONFIGURA√á√ïES CARREGADAS DO .env:")
    print(f"   üî∏ Modelo Premium: {CONFIG_SISTEMA['modelo_premium']}")
    print(f"   üî∏ Modelo Econ√¥mico: {CONFIG_SISTEMA['modelo_economico']}")
    print(f"   üî∏ Max Tokens: {CONFIG_SISTEMA['max_tokens']}")
    print(f"   üî∏ Temperature: {CONFIG_SISTEMA['temperature']}")
    print(f"   üî∏ Timeout: {CONFIG_SISTEMA['timeout']}s")
    print()

# Exibir configura√ß√µes carregadas
exibir_configuracoes()

# Fun√ß√£o para criar configura√ß√£o de agente baseada no modo
def criar_config_agente(modo='economico'):
    if modo == 'premium':
        return {
            'llm': CONFIG_SISTEMA['modelo_premium'],
            'max_tokens': CONFIG_SISTEMA['max_tokens'],
            'temperature': 0.3  # Mais preciso para modo premium
        }
    else:
        return {
            'llm': CONFIG_SISTEMA['modelo_economico'],
            'max_tokens': 1500,  # Menos tokens para economia
            'temperature': CONFIG_SISTEMA['temperature']
        }

# Agente Pesquisador equipado com ferramentas reais
pesquisador_com_ferramentas = Agent(
    role='Pesquisador Web Avan√ßado',
    goal='Coletar informa√ß√µes precisas usando ferramentas de busca web',
    backstory="""Voc√™ √© um pesquisador especializado que utiliza ferramentas
    avan√ßadas para coletar informa√ß√µes da web. Voc√™ sabe como fazer buscas
    eficientes, extrair conte√∫do relevante de sites e validar a qualidade
    das fontes encontradas. Sempre cita suas fontes e verifica a
    credibilidade das informa√ß√µes.
    
    FERRAMENTAS DISPON√çVEIS:
    - busca_web: Para pesquisar t√≥picos na internet
    - scraping_web: Para extrair conte√∫do detalhado de sites
    - leitura_arquivo: Para analisar documentos e arquivos
    
    IMPORTANTE: Sempre se comunique em portugu√™s e use suas ferramentas!""",
    tools=[busca_web_tool, scraping_tool, leitura_arquivo_tool],
    verbose=True,
    allow_delegation=False
)

# Agente Redator com ferramentas
redator_especializado = Agent(
    role='Redator T√©cnico Especializado',
    goal='Criar conte√∫do t√©cnico claro e bem estruturado baseado em pesquisas',
    backstory="""Voc√™ √© um redator t√©cnico experiente que transforma
    informa√ß√µes complexas em conte√∫do acess√≠vel e bem organizado.
    Sua especialidade √© criar artigos t√©cnicos, documenta√ß√£o e relat√≥rios
    que sejam tanto informativos quanto envolventes. Voc√™ sempre organiza
    o conte√∫do de forma l√≥gica e inclui exemplos pr√°ticos.
    
    FERRAMENTAS DISPON√çVEIS:
    - leitura_arquivo: Para consultar documentos de refer√™ncia
    
    IMPORTANTE: Sempre se comunique em portugu√™s e use ferramentas quando necess√°rio!""",
    tools=[leitura_arquivo_tool],
    verbose=True,
    allow_delegation=False
)

# Agente Revisor com ferramentas
revisor_critico = Agent(
    role='Revisor Cr√≠tico e Analista',
    goal='Analisar e validar a qualidade do conte√∫do produzido',
    backstory="""Voc√™ √© um revisor experiente com olhar cr√≠tico para
    qualidade de conte√∫do. Sua fun√ß√£o √© analisar textos em busca de
    inconsist√™ncias, erros factuais, problemas de estrutura e
    oportunidades de melhoria. Voc√™ fornece feedback construtivo
    e sugest√µes espec√≠ficas para aprimoramento.
    
    FERRAMENTAS DISPON√çVEIS:
    - busca_web: Para verificar fatos e informa√ß√µes
    - leitura_arquivo: Para consultar guias de estilo
    
    IMPORTANTE: Sempre se comunique em portugu√™s e use ferramentas para valida√ß√£o!""",
    tools=[busca_web_tool, leitura_arquivo_tool],
    verbose=True,
    allow_delegation=False
)

# --- SISTEMA DE M√âTRICAS ---
class MetricasExecucao:
    def __init__(self):
        self.inicio_execucao = None
        self.fim_execucao = None
        self.tempo_por_tarefa = {}
        self.tokens_estimados = 0
        self.erros_encontrados = []
        self.agentes_ativos = 0
    
    def iniciar_medicao(self, tipo_processo):
        self.inicio_execucao = time.time()
        self.tipo_processo = tipo_processo
        print(f"üìä Iniciando m√©tricas para processo: {tipo_processo}")
    
    def finalizar_medicao(self):
        self.fim_execucao = time.time()
        tempo_total = self.fim_execucao - self.inicio_execucao
        return tempo_total
    
    def adicionar_erro(self, erro):
        self.erros_encontrados.append({
            'timestamp': time.time(),
            'erro': str(erro),
            'tipo': type(erro).__name__
        })
    
    def estimar_tokens(self, texto):
        # Estimativa simples: ~4 caracteres por token
        return len(texto) // 4
    
    def gerar_relatorio(self):
        if not self.inicio_execucao:
            return "‚ùå Nenhuma execu√ß√£o medida"
        
        tempo_total = self.fim_execucao - self.inicio_execucao if self.fim_execucao else time.time() - self.inicio_execucao
        
        relatorio = f"""
üìä RELAT√ìRIO DE M√âTRICAS
{'='*50}
üïê Tempo total de execu√ß√£o: {tempo_total:.2f} segundos
üîÑ Tipo de processo: {self.tipo_processo}
ü§ñ Agentes utilizados: {self.agentes_ativos}
üìà Tokens estimados: {self.tokens_estimados}
‚ùå Erros encontrados: {len(self.erros_encontrados)}
"""
        
        if self.erros_encontrados:
            relatorio += "\n‚ö†Ô∏è DETALHES DOS ERROS:\n"
            for i, erro in enumerate(self.erros_encontrados[-3:], 1):  # √öltimos 3 erros
                relatorio += f"   {i}. {erro['tipo']}: {erro['erro'][:100]}...\n"
        
        return relatorio

# Inst√¢ncia global de m√©tricas
metricas = MetricasExecucao()

# --- PARTE 3: DEFINI√á√ÉO DAS TAREFAS ---

tarefa_pesquisa_web = Task(
    description="""Use suas ferramentas dispon√≠veis para pesquisar informa√ß√µes
    atualizadas sobre 'CrewAI framework para m√∫ltiplos agentes'. 
    
    PROCESSO RECOMENDADO:
    1. Use busca_web para pesquisar "CrewAI framework caracter√≠sticas"
    2. Use scraping_web para extrair conte√∫do de sites relevantes
    3. Use leitura_arquivo para consultar documenta√ß√£o t√©cnica
    
    FOCAR EM:
    1. Caracter√≠sticas principais do framework
    2. Vantagens em rela√ß√£o a outras solu√ß√µes
    3. Casos de uso pr√°ticos e exemplos
    4. Melhores pr√°ticas de implementa√ß√£o
    
    IMPORTANTE: 
    - USE suas ferramentas ativamente!
    - Cite as fontes das ferramentas usadas
    - Responda sempre em portugu√™s""",
    expected_output="""Um relat√≥rio de pesquisa estruturado contendo:
    - Lista de caracter√≠sticas principais (m√≠nimo 5)
    - Compara√ß√£o com outras ferramentas (pelo menos 2)
    - 3 casos de uso pr√°ticos com exemplos
    - Lista de melhores pr√°ticas (m√≠nimo 4)
    - Fontes consultadas via ferramentas
    - Metodologia de pesquisa utilizada
    FORMATO: Todo o conte√∫do deve estar em portugu√™s com se√ß√µes claras.""",
    agent=pesquisador_com_ferramentas
)

tarefa_redacao_tecnica = Task(
    description="""Com base na pesquisa realizada, crie um artigo t√©cnico
    abrangente sobre CrewAI. O artigo deve:
    
    1. Come√ßar com uma introdu√ß√£o atrativa
    2. Explicar o que √© CrewAI e seus benef√≠cios
    3. Apresentar casos de uso pr√°ticos
    4. Incluir uma se√ß√£o de melhores pr√°ticas
    5. Terminar com conclus√µes e pr√≥ximos passos
    
    Use linguagem t√©cnica mas acess√≠vel, inclua exemplos pr√°ticos e
    organize o conte√∫do de forma l√≥gica e envolvente.
    
    IMPORTANTE: Escreva todo o artigo em portugu√™s.""",
    expected_output="""Um artigo t√©cnico de 1000-1200 palavras com:
    - T√≠tulo atrativo e subt√≠tulos organizados
    - Introdu√ß√£o que desperta interesse (100-150 palavras)
    - Se√ß√µes bem estruturadas com exemplos pr√°ticos
    - Lista de melhores pr√°ticas formatada
    - Conclus√£o com pr√≥ximos passos sugeridos
    - Linguagem t√©cnica mas acess√≠vel
    FORMATO: Todo o conte√∫do deve estar em portugu√™s.""",
    agent=redator_especializado
)

tarefa_revisao_critica = Task(
    description="""Revise criticamente o artigo produzido, analisando:
    
    1. Qualidade e precis√£o das informa√ß√µes
    2. Clareza e organiza√ß√£o do conte√∫do
    3. Adequa√ß√£o ao p√∫blico t√©cnico
    4. Completude das informa√ß√µes
    5. Qualidade da escrita e gram√°tica
    
    Forne√ßa feedback espec√≠fico e construtivo, destacando pontos fortes
    e √°reas que precisam de melhoria.
    
    IMPORTANTE: Fa√ßa toda a an√°lise em portugu√™s.""",
    expected_output="""Uma an√°lise cr√≠tica detalhada contendo:
    - Avalia√ß√£o geral da qualidade (nota de 1-10)
    - Lista de pontos fortes identificados (m√≠nimo 3)
    - Lista de pontos a melhorar com sugest√µes espec√≠ficas
    - Coment√°rios sobre a adequa√ß√£o ao p√∫blico-alvo
    - Sugest√µes de melhorias na estrutura ou conte√∫do
    - Verifica√ß√£o de precis√£o das informa√ß√µes t√©cnicas
    FORMATO: Todo o conte√∫do deve estar em portugu√™s.""",
    agent=revisor_critico
)

# --- PARTE 4: PROCESSO SEQUENCIAL ---

print("\nüîÑ DEMONSTRA√á√ÉO: Processo Sequencial")
print("-" * 40)

crew_sequencial = Crew(
    agents=[
        pesquisador_com_ferramentas,
        redator_especializado,
        revisor_critico
    ],
    tasks=[
        tarefa_pesquisa_web,
        tarefa_redacao_tecnica,
        tarefa_revisao_critica
    ],
    process=Process.sequential,  # Execu√ß√£o sequencial - uma tarefa por vez
    verbose=True,
    language='pt-br'  # For√ßa comunica√ß√£o em portugu√™s
)

print("üìã Processo Sequencial configurado:")
print("   1Ô∏è‚É£ Pesquisador ‚Üí Coleta informa√ß√µes")
print("   2Ô∏è‚É£ Redator ‚Üí Cria artigo")
print("   3Ô∏è‚É£ Revisor ‚Üí Analisa qualidade")
print("   ‚è∞ Execu√ß√£o: Uma tarefa por vez, em ordem")

# --- PARTE 5: PROCESSO HIER√ÅRQUICO ---

print("\nüèóÔ∏è DEMONSTRA√á√ÉO: Processo Hier√°rquico")
print("-" * 40)

# Para o processo hier√°rquico, precisamos de um agente manager
manager_projeto = Agent(
    role='Gerente de Projeto Editorial Brasileiro',
    goal='Coordenar equipe editorial garantindo comunica√ß√£o em portugu√™s',
    backstory="""Voc√™ √© um gerente experiente que coordena equipes
    editoriais brasileiras. Sua expertise est√° em delegar tarefas
    eficientemente, garantir qualidade e otimizar o fluxo de trabalho.
    Voc√™ entende as capacidades de cada membro da equipe e sabe como
    aproveitar melhor seus talentos.
    
    FERRAMENTAS DISPON√çVEIS PARA SUPERVISI√ÉO:
    - busca_web: Para verificar informa√ß√µes e refer√™ncias
    - leitura_arquivo: Para consultar diretrizes e padr√µes

    IMPORTANTE:
    - Voc√™ DEVE se comunicar SEMPRE em portugu√™s brasileiro
    - Todas as suas delega√ß√µes devem ser em portugu√™s
    - Exija que todos os agentes respondam em portugu√™s
    - Monitore para garantir que a comunica√ß√£o seja em portugu√™s
    - Se algum agente responder em outro idioma, pe√ßa para repetir
    em portugu√™s
    - Use suas ferramentas para supervisionar e validar o trabalho""",
    tools=[busca_web_tool, leitura_arquivo_tool],
    verbose=True,
    allow_delegation=True
)

# Tarefas para processo hier√°rquico (mais gen√©ricas)
tarefa_projeto_editorial = Task(
    description="""Coordene a produ√ß√£o de um artigo t√©cnico sobre CrewAI,
    delegando tarefas apropriadas para a equipe:

    - Atribua pesquisa para quem tem ferramentas adequadas
    - Delegue reda√ß√£o para especialista em conte√∫do t√©cnico
    - Solicite revis√£o cr√≠tica para garantir qualidade

    Monitore o progresso e garanta que o resultado final atenda aos
    padr√µes de qualidade estabelecidos.

    REGRAS IMPORTANTES:
    1. TODA comunica√ß√£o deve ser em portugu√™s
    2. Se algum agente responder em ingl√™s, pe√ßa para repetir em portugu√™s
    3. Delegue tarefas especificando claramente que devem responder
    em portugu√™s
    4. O produto final deve estar completamente em portugu√™s""",
    expected_output="""Um artigo t√©cnico completo e revisado sobre CrewAI
    com pesquisa fundamentada, reda√ß√£o clara e qualidade validada.

    REQUISITOS OBRIGAT√ìRIOS:
    - TODO o conte√∫do deve estar em portugu√™s brasileiro
    - Nenhum texto em ingl√™s deve aparecer no resultado final
    - Se necess√°rio, traduza termos t√©cnicos e explique em portugu√™s""",
    agent=manager_projeto
)

crew_hierarquico = Crew(
    agents=[manager_projeto, pesquisador_com_ferramentas,
            redator_especializado, revisor_critico],
    tasks=[tarefa_projeto_editorial],
    process=Process.hierarchical,  # Processo hier√°rquico com delega√ß√£o
    manager_llm=CONFIG_SISTEMA['modelo_economico'],  # Modelo mais econ√¥mico para evitar cota
    verbose=True,
    language='pt-br'  # For√ßa comunica√ß√£o em portugu√™s
)

print("üìã Processo Hier√°rquico configurado:")
print("   üë®‚Äçüíº Manager ‚Üí Coordena e delega EM PORTUGU√äS")
print("   üîÑ Agentes ‚Üí Executam tarefas delegadas EM PORTUGU√äS")
print("   ‚ö° Execu√ß√£o: Otimizada com delega√ß√£o inteligente em portugu√™s")
print(f"   üí∞ Usando {CONFIG_SISTEMA['modelo_economico']} para economizar tokens")

# --- PARTE 6: COMPARA√á√ÉO DOS PROCESSOS ---


def executar_processo_sequencial(modo='economico'):
    print("\n" + "="*60)
    print("üöÄ EXECUTANDO PROCESSO SEQUENCIAL")
    if modo == 'premium':
        print(f"üíé MODO PREMIUM - Usando {CONFIG_SISTEMA['modelo_premium']} (mais tokens, melhor qualidade)")
    else:
        print(f"üí∞ MODO ECON√îMICO - Usando {CONFIG_SISTEMA['modelo_economico']} (menos tokens)")
    print("="*60)

    # Iniciar m√©tricas
    metricas.iniciar_medicao(f"Sequencial-{modo}")
    metricas.agentes_ativos = 3

    try:
        # Configurar crew com base no modo
        config = criar_config_agente(modo)
        
        print(f"‚öôÔ∏è Configura√ß√£o: {config['llm']} | Temp: {config['temperature']}")
        print("üîß Ferramentas ativas: busca_web, scraping_web, leitura_arquivo")
        
        resultado_seq = crew_sequencial.kickoff()
        tempo_seq = metricas.finalizar_medicao()
        
        # Estimar tokens usados
        metricas.tokens_estimados = metricas.estimar_tokens(str(resultado_seq))
        
        print(f"\n‚è±Ô∏è Processo Sequencial executado em: {tempo_seq:.2f} segundos")
        print("\nüìä RESULTADO DO PROCESSO SEQUENCIAL:")
        print("-" * 50)
        print(resultado_seq)
        
        # Mostrar m√©tricas
        print(metricas.gerar_relatorio())

        return resultado_seq, tempo_seq
    except Exception as e:
        metricas.adicionar_erro(e)
        error_msg = str(e)
        if "RateLimitError" in error_msg or "quota" in error_msg.lower():
            print(f"‚ùå ERRO DE COTA OpenAI: {e}")
            print("\nüí° SOLU√á√ïES POSS√çVEIS:")
            print("   1. Verifique seu saldo em:")
            print("      https://platform.openai.com/usage")
            print("   2. Adicione cr√©ditos na sua conta OpenAI")
            print("   3. Aguarde se voc√™ est√° no plano gratuito")
            print("      (reset mensal)")
            print("   4. Tente o modo econ√¥mico se estava no premium")
            print("   5. Tente novamente mais tarde")
        else:
            print(f"‚ùå Erro no processo sequencial: {e}")
        
        # Mostrar m√©tricas mesmo com erro
        print(metricas.gerar_relatorio())
        return None, 0


def executar_processo_hierarquico():
    print("\n" + "="*60)
    print("üöÄ EXECUTANDO PROCESSO HIER√ÅRQUICO (COM COMUNICA√á√ÉO EM PORTUGU√äS)")
    print("="*60)
    print(f"üí∞ Usando {CONFIG_SISTEMA['modelo_economico']} para economizar tokens...")

    inicio = time.time()
    try:
        resultado_hier = crew_hierarquico.kickoff()
        tempo_hier = time.time() - inicio

        print(f"\n‚è±Ô∏è Processo Hier√°rquico executado em: {tempo_hier:.2f} segundos")
        print("\nüìä RESULTADO DO PROCESSO HIER√ÅRQUICO:")
        print("-" * 50)
        print(resultado_hier)

        return resultado_hier, tempo_hier
    except Exception as e:
        error_msg = str(e)
        if "RateLimitError" in error_msg or "quota" in error_msg.lower():
            print(f"‚ùå ERRO DE COTA OpenAI: {e}")
            print("\nüí° SOLU√á√ïES PARA PROBLEMA DE COTA:")
            print("   1. Verifique seu saldo em:")
            print("      https://platform.openai.com/usage")
            print("   2. Adicione cr√©ditos na sua conta OpenAI")
            print("   3. Se voc√™ est√° no plano gratuito:")
            print("      - Aguarde o reset mensal")
            print("      - Ou considere upgrade para plano pago")
            print("   4. Use APENAS o processo sequencial (op√ß√£o 1)")
            print("      que consome menos tokens")
            print("\nüîß Otimiza√ß√µes j√° aplicadas:")
            print(f"   - Modelo alterado para {CONFIG_SISTEMA['modelo_economico']} (mais barato)")
            print("   - Tarefas otimizadas para menor consumo")
            print("\nüí° DICA: O processo hier√°rquico usa mais tokens")
            print("         pois o manager precisa coordenar tudo.")
        else:
            print(f"‚ùå Erro no processo hier√°rquico: {e}")
        return None, 0


# --- EXECU√á√ÉO PRINCIPAL ---

if __name__ == "__main__":
    print("\nüé¨ INICIANDO DEMONSTRA√á√ÉO COMPLETA")
    print("=" * 50)

    # Verificar se temos as chaves necess√°rias
    openai_key = os.getenv('OPENAI_API_KEY')
    serper_key = os.getenv('SERPER_API_KEY')

    print("üîë Verificando configura√ß√µes:")
    openai_status = '‚úÖ Configurada' if openai_key else '‚ùå Faltando'
    serper_status = '‚úÖ Configurada' if serper_key else '‚ùå Faltando'

    print(f"   OpenAI API Key: {openai_status}")
    print(f"   Serper API Key: {serper_status}")

    if not openai_key:
        print("\n‚ùå ERRO: Chave da OpenAI n√£o encontrada!")
        print("Configure a vari√°vel OPENAI_API_KEY no arquivo .env")
        exit(1)

    if not serper_key:
        print("\n‚ö†Ô∏è AVISO: Chave do Serper n√£o encontrada!")
        print("Algumas ferramentas de busca podem n√£o funcionar.")
        print("Configure SERPER_API_KEY em https://serper.dev/")

    # Menu de escolha com avisos sobre uso de tokens
    print("\nüìã ESCOLHA O PROCESSO PARA EXECUTAR:")
    print("1Ô∏è‚É£ - Processo Sequencial ECON√îMICO")
    print("     (gpt-3.5-turbo + ferramentas - MENOS TOKENS)")
    print("2Ô∏è‚É£ - Processo Sequencial PREMIUM")
    print("     (gpt-4 + ferramentas - MAIS QUALIDADE)")
    print("3Ô∏è‚É£ - Processo Hier√°rquico COM MANAGER EM PORTUGU√äS")
    print("     (gpt-3.5-turbo + delega√ß√£o - MAIS TOKENS)")
    print("4Ô∏è‚É£ - Comparar Sequencial vs Hier√°rquico")
    print("     (ambos econ√¥micos - MUITOS TOKENS)")
    print("5Ô∏è‚É£ - Testar apenas as ferramentas")
    print("     (demonstra√ß√£o de ferramentas - POUCOS TOKENS)")
    print("6Ô∏è‚É£ - Apenas demonstrar conceitos")
    print("     (sem executar - SEM CUSTO)")
    print("\nüîß NOVIDADES DESTA VERS√ÉO:")
    print("   ‚úÖ Ferramentas reais integradas aos agentes")
    print("   ‚úÖ Sistema de m√©tricas e monitoramento")
    print("   ‚úÖ Configura√ß√£o din√¢mica de modelos")
    print("   ‚úÖ Interface aprimorada com mais op√ß√µes")
    print("\n‚ö†Ô∏è AVISO IMPORTANTE:")
    print("   - Hier√°rquico usa MAIS tokens (manager + agentes)")
    print("   - Modo Premium usa gpt-4 (mais caro, melhor qualidade)")
    print("   - Todas as op√ß√µes incluem ferramentas funcionais")

    escolha = input("\nDigite sua escolha (1-6): ").strip()

    if escolha == "1":
        print("\nüí∞ MODO ECON√îMICO SELECIONADO")
        resultado_seq, tempo_seq = executar_processo_sequencial(modo='economico')

    elif escolha == "2":
        print("\nüíé MODO PREMIUM SELECIONADO")
        print("‚ö†Ô∏è ATEN√á√ÉO: Usa gpt-4 - consumo maior de tokens!")
        confirm = input("Confirma execu√ß√£o em modo premium? (s/N): ").strip().lower()
        if confirm == 's':
            resultado_seq, tempo_seq = executar_processo_sequencial(modo='premium')
        else:
            print("Opera√ß√£o cancelada. Voltando ao menu...")

    elif escolha == "3":
        print("\nüáßüá∑ EXECUTANDO COM COMUNICA√á√ÉO FOR√áADA EM PORTUGU√äS")
        print(f"üí∞ USANDO MODELO ECON√îMICO ({CONFIG_SISTEMA['modelo_economico']})")
        resultado_hier, tempo_hier = executar_processo_hierarquico()

    elif escolha == "4":
        print("\nüîÑ Executando compara√ß√£o completa...")
        print("‚ö†Ô∏è ATEN√á√ÉO: Isso consumir√° MUITOS tokens!")
        confirm = input("Tem certeza? (s/N): ").strip().lower()
        if confirm == 's':
            resultado_seq, tempo_seq = executar_processo_sequencial(modo='economico')
            print("\nüáßüá∑ AGORA COM PROCESSO HIER√ÅRQUICO:")
            resultado_hier, tempo_hier = executar_processo_hierarquico()

            # Compara√ß√£o final
            if resultado_seq and resultado_hier:
                print("\n" + "="*60)
                print("üìä COMPARA√á√ÉO FINAL DOS PROCESSOS")
                print("="*60)

                print("‚è±Ô∏è Tempo de Execu√ß√£o:")
                print(f"   Sequencial: {tempo_seq:.2f}s")
                print(f"   Hier√°rquico (PT-BR): {tempo_hier:.2f}s")
                print(f"   Diferen√ßa: {abs(tempo_seq - tempo_hier):.2f}s")

                print("\nüéØ Caracter√≠sticas:")
                print("   Sequencial: Previs√≠vel, linear, ideal para fluxos")
                print("   Hier√°rquico: Flex√≠vel, otimizado, projetos complexos")
                print("   üáßüá∑ PORTUGU√äS: Manager for√ßa comunica√ß√£o em portugu√™s!")
        else:
            print("Opera√ß√£o cancelada.")

    elif escolha == "5":
        print("\nüîß TESTANDO FERRAMENTAS INDIVIDUALMENTE")
        print("="*50)
        
        # Teste da ferramenta de busca
        print("\n1Ô∏è‚É£ Testando Busca Web:")
        print("-" * 30)
        resultado_busca = busca_web_tool._run("CrewAI framework")
        print(resultado_busca)
        
        # Teste da ferramenta de scraping
        print("\n2Ô∏è‚É£ Testando Scraping:")
        print("-" * 30)
        resultado_scraping = scraping_tool._run("https://docs.crewai.com")
        print(resultado_scraping)
        
        # Teste da ferramenta de leitura
        print("\n3Ô∏è‚É£ Testando Leitura de Arquivo:")
        print("-" * 30)
        resultado_arquivo = leitura_arquivo_tool._run("config_crewai.txt")
        print(resultado_arquivo)
        
        print("\n‚úÖ TESTE DE FERRAMENTAS CONCLU√çDO!")
        print("üí° Todas as ferramentas est√£o funcionando e prontas para uso.")

    elif escolha == "6":
        print("\nüìö CONCEITOS DEMONSTRADOS (sem execu√ß√£o):")
        print("=" * 50)

        print("\nüîß FERRAMENTAS REAIS (TOOLS):")
        print("‚Ä¢ BuscaWebTool - Busca inteligente na web com resultados estruturados")
        print("‚Ä¢ ScrapingTool - Extra√ß√£o de conte√∫do detalhado de sites")
        print("‚Ä¢ LeituraArquivoTool - An√°lise de documentos e arquivos")
        print("‚Ä¢ Integra√ß√£o completa com agentes CrewAI")
        print("‚Ä¢ Esquemas Pydantic para valida√ß√£o de entrada")
        print("‚Ä¢ Ferramentas expandem capacidades dos agentes")

        print("\nüîÑ PROCESSOS APRIMORADOS:")
        print("‚Ä¢ SEQUENCIAL:")
        print("  - Execu√ß√£o linear com ferramentas integradas")
        print("  - Previs√≠vel e f√°cil de debugar")
        print("  - Modo econ√¥mico (gpt-3.5-turbo) e premium (gpt-4)")
        print("  - Ideal para fluxos bem definidos")
        print("  - üí∞ MENOS TOKENS")

        print("‚Ä¢ HIER√ÅRQUICO:")
        print("  - Manager coordena e delega tarefas")
        print("  - Execu√ß√£o otimizada com ferramentas")
        print("  - Ideal para projetos complexos")
        print("  - Requer LLM para o manager")
        print("  - üáßüá∑ CONFIGURADO PARA PORTUGU√äS!")
        print("  - üí∞ MAIS TOKENS (mas otimizado)")

        print("\nüìä SISTEMA DE M√âTRICAS:")
        print("‚Ä¢ Tempo de execu√ß√£o detalhado por processo")
        print("‚Ä¢ Estimativa de tokens consumidos")
        print("‚Ä¢ Monitoramento de erros em tempo real")
        print("‚Ä¢ Relat√≥rios autom√°ticos de performance")
        print("‚Ä¢ Compara√ß√£o entre diferentes modos de execu√ß√£o")

        print("\nüáßüá∑ CONFIGURA√á√ïES DE IDIOMA:")
        print("‚Ä¢ language='pt-br' nos Crews")
        print("‚Ä¢ Instru√ß√µes expl√≠citas em portugu√™s nos backstories")
        print("‚Ä¢ Manager treinado para exigir comunica√ß√£o em portugu√™s")
        print("‚Ä¢ Tarefas especificam formato de sa√≠da em portugu√™s")
        print("‚Ä¢ Ferramentas retornam conte√∫do em portugu√™s")

        print("\nüí∞ OTIMIZA√á√ïES DE CUSTO:")
        print("‚Ä¢ Configura√ß√£o din√¢mica de modelos (econ√¥mico/premium)")
        print("‚Ä¢ Processo hier√°rquico usa gpt-3.5-turbo em vez de gpt-4")
        print("‚Ä¢ Tratamento espec√≠fico para erros de cota")
        print("‚Ä¢ Avisos claros sobre consumo de tokens")
        print("‚Ä¢ Op√ß√£o de teste de ferramentas com baixo custo")
        print("‚Ä¢ Estimativa de tokens em tempo real")

        print("\nüîß FUNCIONALIDADES NOVAS:")
        print("‚Ä¢ Teste individual de ferramentas (op√ß√£o 5)")
        print("‚Ä¢ Modo premium com gpt-4 para m√°xima qualidade")
        print("‚Ä¢ Sistema de confirma√ß√£o para opera√ß√µes custosas")
        print("‚Ä¢ Relat√≥rios detalhados de m√©tricas")
        print("‚Ä¢ Interface aprimorada com mais op√ß√µes")

        print("\nüí° QUANDO USAR CADA OP√á√ÉO:")
        print("‚Ä¢ Op√ß√£o 1 (Sequencial Econ√¥mico): Aprendizado, economia, testes")
        print("‚Ä¢ Op√ß√£o 2 (Sequencial Premium): M√°xima qualidade, projetos importantes")
        print("‚Ä¢ Op√ß√£o 3 (Hier√°rquico): Projetos complexos, quando h√° cr√©ditos")
        print("‚Ä¢ Op√ß√£o 4 (Compara√ß√£o): An√°lise de performance, pesquisa")
        print("‚Ä¢ Op√ß√£o 5 (Teste Ferramentas): Validar funcionamento, debug")
        print("‚Ä¢ Op√ß√£o 6 (Demonstra√ß√£o): Aprender conceitos sem custo")
        print("‚Ä¢ üáßüá∑ Todas configuradas para comunica√ß√£o em portugu√™s!")

    else:
        print("‚ùå Escolha inv√°lida! Execute novamente o script.")
        print("üí° Op√ß√µes v√°lidas: 1, 2, 3, 4, 5 ou 6")

    # Li√ß√µes aprendidas
    print("\n" + "="*60)
    print("üéì LI√á√ïES DA AULA 3 - VERS√ÉO APRIMORADA:")
    print("="*60)
    print("‚úÖ Implementamos ferramentas REAIS do CrewAI")
    print("‚úÖ Integramos ferramentas diretamente aos agentes")
    print("‚úÖ Criamos sistema de m√©tricas e monitoramento")
    print("‚úÖ Adicionamos configura√ß√£o din√¢mica de modelos")
    print("‚úÖ Comparamos processos Sequencial vs Hier√°rquico")
    print("‚úÖ Entendemos quando usar cada tipo de processo")
    print("‚úÖ Exploramos coordena√ß√£o avan√ßada com managers")
    print("üáßüá∑ CONFIGURAMOS TODA COMUNICA√á√ÉO EM PORTUGU√äS!")
    print("üí∞ OTIMIZAMOS PARA ECONOMIZAR TOKENS DA OPENAI!")
    print("üîß ADICIONAMOS FERRAMENTAS FUNCIONAIS E M√âTRICAS!")

    print("\nüéØ Pr√≥xima aula: Arquitetura de Chatbots Multi-Agente!")

    print("\nüí° DICAS IMPORTANTES:")
    print("üîß Ferramentas s√£o o que tornam os agentes realmente poderosos!")
    print("üí∞ Use modo econ√¥mico para aprender e premium para produ√ß√£o")
    print("üìä M√©tricas ajudam a monitorar performance e custos")
    print("üáßüá∑ Tudo funciona em portugu√™s brasileiro!")
    print("‚ö†Ô∏è  Monitore sempre seu uso da API OpenAI")
    print("üöÄ Teste as ferramentas individualmente antes de usar em produ√ß√£o")

print("\nüèÅ Aula 3 conclu√≠da com sucesso!")
print("üáßüá∑ Toda a comunica√ß√£o configurada para portugu√™s!")
print("üí∞ Otimizada para economizar tokens da OpenAI!")
print("üîß Ferramentas reais integradas e funcionais!")
print("üìä Sistema de m√©tricas implementado!")