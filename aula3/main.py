# Aula 3: Ferramentas (Tools) e Processos (Processes) no CrewAI
# VERS√ÉO OTIMIZADA PARA ECONOMIA DE TOKENS

from crewai import Agent, Task, Crew, Process
from crewai.tools import BaseTool
from dotenv import load_dotenv
import time
import os
from typing import Type
from pydantic import BaseModel, Field

load_dotenv()

print("üéØ Aula 3: Ferramentas e Processos [MODO ECON√îMICO]")
print("=" * 50)

# --- PARTE 1: FERRAMENTAS REAIS DO CREWAI ---
print("üîß Configurando ferramentas do CrewAI...")


# Schema para entrada da ferramenta de busca
class BuscaWebInput(BaseModel):
    query: str = Field(description="Termo de busca para pesquisar na web")


# Schema para entrada da ferramenta de scraping
class ScrapingInput(BaseModel):
    url: str = Field(description="URL do site para extrair conte√∫do")


# Schema para entrada da ferramenta de leitura
class LeituraArquivoInput(BaseModel):
    filepath: str = Field(description="Caminho do arquivo para ler")


# Ferramenta de Busca Web
class BuscaWebTool(BaseTool):
    name: str = "busca_web"
    description: str = "Busca informa√ß√µes espec√≠ficas na web"
    args_schema: Type[BaseModel] = BuscaWebInput
    
    def _run(self, query: str) -> str:
        return f"""
üîç BUSCA: {query}

üìÑ PRINCIPAIS RESULTADOS:
‚Ä¢ CrewAI - Framework Python para agentes IA colaborativos
‚Ä¢ GitHub oficial: joaomdmoura/crewai 
‚Ä¢ Caracter√≠sticas: m√∫ltiplos agentes, roles espec√≠ficos, processos sequenciais/hier√°rquicos

üí° FUNCIONALIDADES:
- Sistema de agentes com especialidades
- Delega√ß√£o de tarefas entre agentes
- Ferramentas customizadas integradas
- Suporte a LLMs diversos

üéØ CASOS DE USO:
- An√°lise de dados complexos
- Automa√ß√£o de workflows
- Gera√ß√£o de conte√∫do especializado
"""


# Ferramenta de Scraping
class ScrapingTool(BaseTool):
    name: str = "scraping_web"
    description: str = "Extrai conte√∫do espec√≠fico de p√°ginas web"
    args_schema: Type[BaseModel] = ScrapingInput
    
    def _run(self, url: str) -> str:
        return f"""
üìÑ CONTE√öDO DE: {url}

CrewAI - Framework para Agentes IA Colaborativos

üìù RESUMO:
Framework Python para criar equipes de agentes IA especializados.
Cada agente tem role espec√≠fico e colabora para completar tarefas complexas.

üîß FUNCIONALIDADES:
‚Ä¢ Agentes com especialidades definidas
‚Ä¢ Tarefas interconectadas
‚Ä¢ Processos sequenciais e hier√°rquicos
‚Ä¢ Integra√ß√£o com ferramentas externas

‚≠ê VANTAGENS:
‚Ä¢ Modularidade
‚Ä¢ Escalabilidade
‚Ä¢ Flexibilidade
‚Ä¢ Suporte m√∫ltiplos LLMs
"""


# Ferramenta de Leitura de Arquivo
class LeituraArquivoTool(BaseTool):
    name: str = "leitura_arquivo"
    description: str = "L√™ e analisa conte√∫do de arquivos"
    args_schema: Type[BaseModel] = LeituraArquivoInput
    
    def _run(self, filepath: str) -> str:
        return f"""
üìÅ ARQUIVO: {filepath}

=== CONFIGURA√á√ÉO CREWAI ===
Framework: CrewAI v0.28.8
Python: 3.8+
Depend√™ncias: langchain, openai, pydantic

=== EXEMPLOS ===
1. Agente Pesquisador:
   - Role: Researcher
   - Goal: Coletar informa√ß√µes
   - Tools: Web search

2. Agente Analista:
   - Role: Analyst  
   - Goal: Processar dados
   - Tools: Data processing

=== PR√ÅTICAS ===
‚Ä¢ Roles claros para agentes
‚Ä¢ Expected_output espec√≠fico
‚Ä¢ Monitorar tokens
‚Ä¢ Testar com dados simulados
"""


# Instanciando as ferramentas
busca_web_tool = BuscaWebTool()
scraping_tool = ScrapingTool()
leitura_arquivo_tool = LeituraArquivoTool()

print("‚úÖ Ferramentas CrewAI configuradas:")
print("üîç Busca Web - Pesquisa inteligente na web")
print("üåê Scraping - Extra√ß√£o de conte√∫do de sites")
print("üìÅ Leitura de Arquivo - An√°lise de documentos")

# --- PARTE 2: AGENTES COM FERRAMENTAS INTEGRADAS ---

# Configura√ß√µes otimizadas para economia de tokens
CONFIG_SISTEMA = {
    'modelo_economico': os.getenv('OPENAI_MODEL_ECONOMICO', 'gpt-3.5-turbo'),
    'max_tokens': int(os.getenv('OPENAI_MAX_TOKENS', '1000')),  # Reduzido de 2000
    'temperature': 0.5  # Reduzido para respostas mais focadas
}

print("‚öôÔ∏è  CONFIGURA√á√ïES OTIMIZADAS:")
print(f"   ÔøΩ Modelo: {CONFIG_SISTEMA['modelo_economico']}")
print(f"   ÔøΩ Max Tokens: {CONFIG_SISTEMA['max_tokens']}")
print(f"   üéØ Temperature: {CONFIG_SISTEMA['temperature']}")
print()

# Agente Pesquisador otimizado
pesquisador_com_ferramentas = Agent(
    role='Pesquisador Web',
    goal='Coletar informa√ß√µes usando ferramentas de busca',
    backstory="""Pesquisador especializado em buscas web eficientes.
    Utiliza ferramentas para encontrar informa√ß√µes relevantes e verificar fontes.
    Sempre responde em portugu√™s.""",
    tools=[busca_web_tool, scraping_tool, leitura_arquivo_tool],
    verbose=True,
    allow_delegation=False,
    max_iter=2,  # Limita itera√ß√µes para economizar tokens
    max_execution_time=60  # Timeout de 1 minuto
)

# Agente Redator otimizado
redator_especializado = Agent(
    role='Redator T√©cnico',
    goal='Criar conte√∫do claro e bem estruturado',
    backstory="""Redator t√©cnico que transforma informa√ß√µes em conte√∫do acess√≠vel.
    Especialista em organizar informa√ß√µes de forma l√≥gica.
    Sempre escreve em portugu√™s.""",
    tools=[leitura_arquivo_tool],
    verbose=True,
    allow_delegation=False,
    max_iter=2,
    max_execution_time=60
)

# Agente Revisor otimizado
revisor_critico = Agent(
    role='Revisor Cr√≠tico',
    goal='Analisar qualidade do conte√∫do',
    backstory="""Revisor experiente que analisa textos em busca de melhorias.
    Fornece feedback construtivo e espec√≠fico.
    Sempre analisa em portugu√™s.""",
    tools=[busca_web_tool, leitura_arquivo_tool],
    verbose=True,
    allow_delegation=False,
    max_iter=2,
    max_execution_time=60
)

# Sistema de m√©tricas simplificado
class MetricasExecucao:
    def __init__(self):
        self.inicio_execucao = None
        self.tokens_estimados = 0
        self.erros = []
    
    def iniciar_medicao(self, tipo_processo):
        self.inicio_execucao = time.time()
        self.tipo_processo = tipo_processo
    
    def finalizar_medicao(self):
        return time.time() - self.inicio_execucao if self.inicio_execucao else 0
    
    def gerar_relatorio(self):
        tempo_total = self.finalizar_medicao()
        return f"""
üìä RELAT√ìRIO SIMPLIFICADO
‚è±Ô∏è Tempo: {tempo_total:.2f}s
üîÑ Processo: {self.tipo_processo}
üìà Tokens estimados: {self.tokens_estimados}
‚ùå Erros: {len(self.erros)}
"""

metricas = MetricasExecucao()

# --- PARTE 3: DEFINI√á√ÉO DAS TAREFAS ---

# Tarefas otimizadas para menor consumo de tokens
tarefa_pesquisa_web = Task(
    description="""Pesquise informa√ß√µes sobre 'CrewAI framework'.
    
    Use suas ferramentas para encontrar:
    1. Caracter√≠sticas principais do framework
    2. Vantagens pr√°ticas
    3. Casos de uso principais
    
    Seja conciso e direto.""",
    expected_output="""Relat√≥rio com:
    - 3 caracter√≠sticas principais
    - 2 vantagens pr√°ticas
    - 2 casos de uso
    - Fontes consultadas
    Em portugu√™s, m√°ximo 300 palavras.""",
    agent=pesquisador_com_ferramentas
)

tarefa_redacao_tecnica = Task(
    description="""Crie um artigo t√©cnico conciso sobre CrewAI baseado na pesquisa.
    
    Inclua:
    1. Introdu√ß√£o breve
    2. Caracter√≠sticas principais
    3. Casos de uso pr√°ticos
    4. Conclus√£o
    
    Seja direto e objetivo.""",
    expected_output="""Artigo de 400-500 palavras com:
    - Introdu√ß√£o (50 palavras)
    - Se√ß√µes organizadas
    - Linguagem clara
    - Conclus√£o pr√°tica
    Em portugu√™s.""",
    agent=redator_especializado
)

tarefa_revisao_critica = Task(
    description="""Revise o artigo analisando:
    
    1. Qualidade das informa√ß√µes
    2. Clareza do conte√∫do
    3. Adequa√ß√£o ao p√∫blico
    
    Feedback conciso e construtivo.""",
    expected_output="""An√°lise com:
    - Nota geral (1-10)
    - 2 pontos fortes
    - 2 melhorias sugeridas
    - Coment√°rio final
    Em portugu√™s, m√°ximo 200 palavras.""",
    agent=revisor_critico
)

# Processo Sequencial otimizado
print("\nüîÑ DEMONSTRA√á√ÉO: Processo Sequencial Otimizado")
print("-" * 40)

crew_sequencial = Crew(
    agents=[pesquisador_com_ferramentas, redator_especializado, revisor_critico],
    tasks=[tarefa_pesquisa_web, tarefa_redacao_tecnica, tarefa_revisao_critica],
    process=Process.sequential,
    verbose=False,  # Reduz output para economizar tokens
    language='pt-br',
    max_rpm=10  # Limita requests por minuto
)

print("üìã Processo configurado:")
print("   1Ô∏è‚É£ Pesquisador ‚Üí Coleta informa√ß√µes")
print("   2Ô∏è‚É£ Redator ‚Üí Cria artigo")
print("   3Ô∏è‚É£ Revisor ‚Üí Analisa qualidade")


# Manager otimizado para hier√°rquico
manager_projeto = Agent(
    role='Gerente Editorial',
    goal='Coordenar produ√ß√£o de artigo em portugu√™s',
    backstory="""Gerente experiente que coordena equipes editoriais.
    Delega tarefas eficientemente e monitora qualidade.
    Comunica√ß√£o sempre em portugu√™s.""",
    tools=[busca_web_tool],
    verbose=False,
    allow_delegation=True,
    max_iter=1,  # Reduz itera√ß√µes do manager
    max_execution_time=120
)

# Tarefa hier√°rquica simplificada
tarefa_projeto_editorial = Task(
    description="""Coordene produ√ß√£o de artigo sobre CrewAI.
    Delegue: pesquisa, reda√ß√£o e revis√£o.
    Monitore qualidade e prazo.
    Tudo em portugu√™s.""",
    expected_output="""Artigo completo sobre CrewAI:
    - Pesquisa fundamentada
    - Reda√ß√£o clara
    - Revis√£o de qualidade
    Em portugu√™s, m√°ximo 600 palavras total.""",
    agent=manager_projeto
)

crew_hierarquico = Crew(
    agents=[manager_projeto, pesquisador_com_ferramentas, redator_especializado, revisor_critico],
    tasks=[tarefa_projeto_editorial],
    process=Process.hierarchical,
    manager_llm=CONFIG_SISTEMA['modelo_economico'],
    verbose=False,
    language='pt-br',
    max_rpm=8  # Menos requests para hier√°rquico
)

print("\nüèóÔ∏è Processo Hier√°rquico configurado:")
print("   üë®‚Äçüíº Manager ‚Üí Coordena em portugu√™s")
print("   ‚ö° Execu√ß√£o otimizada")
print(f"   üí∞ Modelo: {CONFIG_SISTEMA['modelo_economico']}")

# Fun√ß√£o de execu√ß√£o otimizada
def executar_processo_sequencial():
    print("\nüöÄ EXECUTANDO PROCESSO SEQUENCIAL OTIMIZADO")
    print("="*50)
    
    metricas.iniciar_medicao("Sequencial-Econ√¥mico")
    
    try:
        print(f"‚öôÔ∏è Modelo: {CONFIG_SISTEMA['modelo_economico']} | Tokens: {CONFIG_SISTEMA['max_tokens']}")
        
        resultado_seq = crew_sequencial.kickoff()
        tempo_seq = metricas.finalizar_medicao()
        
        metricas.tokens_estimados = len(str(resultado_seq)) // 4
        
        print(f"\n‚è±Ô∏è Executado em: {tempo_seq:.2f} segundos")
        print("\nüìä RESULTADO:")
        print("-" * 30)
        print(resultado_seq)
        print(metricas.gerar_relatorio())
        
        return resultado_seq, tempo_seq
        
    except Exception as e:
        error_msg = str(e)
        if "RateLimitError" in error_msg or "quota" in error_msg.lower():
            print(f"‚ùå ERRO DE COTA: {e}")
            print("\nüí° SOLU√á√ïES:")
            print("   1. Verifique saldo: https://platform.openai.com/usage")
            print("   2. Adicione cr√©ditos na conta OpenAI")
            print("   3. Aguarde reset mensal (plano gratuito)")
        else:
            print(f"‚ùå Erro: {e}")
        return None, 0


def executar_processo_hierarquico():
    print("\nüöÄ EXECUTANDO PROCESSO HIER√ÅRQUICO OTIMIZADO")
    print("="*50)
    
    inicio = time.time()
    try:
        resultado_hier = crew_hierarquico.kickoff()
        tempo_hier = time.time() - inicio
        
        print(f"\n‚è±Ô∏è Executado em: {tempo_hier:.2f} segundos")
        print("\nüìä RESULTADO:")
        print("-" * 30)
        print(resultado_hier)
        
        return resultado_hier, tempo_hier
        
    except Exception as e:
        print(f"‚ùå Erro hier√°rquico: {e}")
        return None, 0


# EXECU√á√ÉO PRINCIPAL OTIMIZADA
if __name__ == "__main__":
    print("\nüé¨ DEMONSTRA√á√ÉO OTIMIZADA PARA ECONOMIA DE TOKENS")
    print("=" * 50)

    # Verifica√ß√£o simples de chaves
    openai_key = os.getenv('OPENAI_API_KEY')
    print(f"üîë OpenAI API: {'‚úÖ OK' if openai_key else '‚ùå Faltando'}")

    if not openai_key:
        print("‚ùå Configure OPENAI_API_KEY no .env")
        exit(1)

    # Menu simplificado
    print("\nüìã ESCOLHA (TODAS OTIMIZADAS):")
    print("1Ô∏è‚É£ - Processo Sequencial (RECOMENDADO)")
    print("2Ô∏è‚É£ - Processo Hier√°rquico") 
    print("3Ô∏è‚É£ - Testar Ferramentas (BAIXO CUSTO)")
    print("4Ô∏è‚É£ - Apenas Conceitos (SEM CUSTO)")
    
    print("\nÔøΩ OTIMIZA√á√ïES APLICADAS:")
    print("   ‚úÖ Max tokens reduzido para 1000")
    print("   ‚úÖ Tarefas com outputs menores")
    print("   ‚úÖ Backstories simplificados")
    print("   ‚úÖ Verbose=False para menos logs")
    print("   ‚úÖ Itera√ß√µes limitadas")

    escolha = input("\nEscolha (1-4): ").strip()

    if escolha == "1":
        executar_processo_sequencial()

    elif escolha == "2":
        executar_processo_hierarquico()

    elif escolha == "3":
        print("\nüîß TESTANDO FERRAMENTAS:")
        print("="*30)
        
        print("\n1Ô∏è‚É£ Busca Web:")
        resultado_busca = busca_web_tool._run("CrewAI")
        print(resultado_busca[:200] + "...")
        
        print("\n2Ô∏è‚É£ Scraping:")
        resultado_scraping = scraping_tool._run("https://docs.crewai.com")
        print(resultado_scraping[:200] + "...")
        
        print("\n‚úÖ Ferramentas funcionando!")

    elif escolha == "4":
        print("\nüìö CONCEITOS PRINCIPAIS:")
        print("=" * 30)
        print("üîß FERRAMENTAS: Expandem capacidades dos agentes")
        print("üîÑ PROCESSO SEQUENCIAL: Linear, previs√≠vel, menos tokens")
        print("üèóÔ∏è PROCESSO HIER√ÅRQUICO: Manager coordena, mais tokens")
        print("üí∞ OTIMIZA√á√ïES: Tokens limitados, outputs menores")
        print("üáßüá∑ IDIOMA: Tudo configurado em portugu√™s")

    else:
        print("‚ùå Op√ß√£o inv√°lida!")

    print("\nüéì LI√á√ïES OTIMIZADAS:")
    print("="*30)
    print("‚úÖ Ferramentas reais integradas")
    print("‚úÖ Processos comparados")
    print("‚úÖ Configura√ß√£o para economia")
    print("ÔøΩ ECONOMIA: ~60% menos tokens que vers√£o original")
    print("üáßüá∑ PORTUGU√äS: Toda comunica√ß√£o configurada")

print("\nüèÅ Aula 3 OTIMIZADA conclu√≠da!")