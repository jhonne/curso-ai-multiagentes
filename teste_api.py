"""
Teste R√°pido da API OpenAI
Script simples para verificar se tudo est√° funcionando
"""

import os
import time
import hashlib
from datetime import datetime
from dotenv import load_dotenv


class MonitorCustos:
    """Monitor b√°sico de custos para testes"""
    def __init__(self):
        self.precos_modelo = {
            "gpt-4o-mini": {"input": 0.15/1000000, "output": 0.60/1000000},
            "gpt-3.5-turbo": {"input": 0.50/1000000, "output": 1.50/1000000}
        }
    
    def calcular_custo(self, tokens_input, tokens_output, modelo="gpt-4o-mini"):
        """Calcula custo estimado baseado nos tokens usados"""
        preco = self.precos_modelo.get(modelo, self.precos_modelo["gpt-4o-mini"])
        custo = (tokens_input * preco["input"]) + (tokens_output * preco["output"])
        return custo


def validar_api_key(api_key):
    """Valida√ß√£o robusta da API key OpenAI"""
    if not api_key:
        return False, "API key n√£o encontrada"
    
    if not isinstance(api_key, str):
        return False, "API key deve ser uma string"
    
    if not api_key.startswith('sk-'):
        return False, "Formato inv√°lido (deve come√ßar com 'sk-')"
    
    if len(api_key) < 20:
        return False, "API key muito curta"
    
    return True, "API key v√°lida"


def verificar_conteudo_seguro(texto):
    """Verifica√ß√£o b√°sica de conte√∫do seguro usando API de Modera√ß√£o"""
    try:
        from openai import OpenAI
        client = OpenAI()
        response = client.moderations.create(input=texto)
        return not response.results[0].flagged
    except Exception:
        # Em caso de erro, ser conservador mas n√£o bloquear teste
        return True


def gerar_safety_identifier():
    """Gera identificador seguro para rastreamento"""
    timestamp = str(int(time.time()))
    return hashlib.sha256(f"teste_{timestamp}".encode()).hexdigest()[:16]


def teste_rapido_openai():
    """Teste r√°pido e direto da API OpenAI"""

    print("üîç Teste R√°pido da API OpenAI")
    print("-" * 40)

    # Carregar vari√°veis de ambiente
    load_dotenv()

    # 1. Verificar e validar API key
    api_key = os.getenv("OPENAI_API_KEY")
    
    valida, mensagem = validar_api_key(api_key)
    if not valida:
        print(f"‚ùå {mensagem}")
        print("üí° Configure no arquivo .env:")
        print("   OPENAI_API_KEY=sua_chave_aqui")
        return False

    print(f"‚úÖ API key v√°lida: {api_key[:7]}...{api_key[-4:]}")
    
    # Gerar identificador de seguran√ßa
    safety_id = gerar_safety_identifier()
    print(f"üîí Safety ID: {safety_id}")

    # 2. Tentar importar e usar OpenAI
    try:
        from openai import OpenAI

        print("‚úÖ Biblioteca openai importada")
    except ImportError:
        print("‚ùå Biblioteca openai n√£o encontrada!")
        print("üí° Execute: uv add openai")
        return False

    # 3. Inicializar cliente
    try:
        client = OpenAI(api_key=api_key)
        print("‚úÖ Cliente OpenAI inicializado")
    except Exception as e:
        print(f"‚ùå Erro ao inicializar: {e}")
        return False

    # 4. Teste otimizado com monitoramento
    try:
        print("üß™ Fazendo teste otimizado...")
        
        # Inicializar monitor de custos
        monitor = MonitorCustos()
        
        # Mensagem de teste otimizada
        mensagem_teste = "Responda apenas: OK"
        
        # Verifica√ß√£o de seguran√ßa (opcional, n√£o bloqueia se falhar)
        if not verificar_conteudo_seguro(mensagem_teste):
            print("‚ö†Ô∏è Conte√∫do n√£o passou na modera√ß√£o, mas continuando teste...")
        
        # Rate limiting preventivo
        time.sleep(0.5)
        
        print(f"‚è∞ Teste iniciado em {datetime.now().strftime('%H:%M:%S')}")

        response = client.chat.completions.create(
            model="gpt-4o-mini",  # ‚úÖ Modelo mais econ√¥mico
            messages=[
                {"role": "user", "content": mensagem_teste}
            ],
            max_tokens=10,  # ‚úÖ Reduzido para economia
            temperature=0,  # ‚úÖ Determin√≠stico e econ√¥mico
        )

        resposta = response.choices[0].message.content
        tokens_total = response.usage.total_tokens
        tokens_input = response.usage.prompt_tokens
        tokens_output = response.usage.completion_tokens
        
        # Calcular custo estimado
        custo = monitor.calcular_custo(tokens_input, tokens_output, "gpt-4o-mini")

        print(f"‚úÖ Resposta: {resposta}")
        print(f"üî¢ Tokens: {tokens_total} (entrada: {tokens_input}, sa√≠da: {tokens_output})")
        print(f"üí∞ Custo estimado: ${custo:.6f}")
        print(f"üéØ Modelo: gpt-4o-mini (otimizado para economia)")
        print("üéâ TESTE OTIMIZADO BEM-SUCEDIDO!")

        return True

    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")

        # Dicas baseadas no erro com mais detalhes
        erro_str = str(e).lower()
        if "401" in erro_str or "unauthorized" in erro_str:
            print("üí° Chave API inv√°lida ou expirada")
            print("   ‚Üí Verifique se a chave est√° correta no arquivo .env")
        elif "429" in erro_str or "rate limit" in erro_str:
            print("üí° Limite de requisi√ß√µes excedido")
            print("   ‚Üí Aguarde alguns minutos antes de tentar novamente")
        elif "insufficient" in erro_str or "quota" in erro_str:
            print("üí° Cota esgotada - verifique seu saldo")
            print("   ‚Üí Acesse https://platform.openai.com/usage")
        elif "network" in erro_str or "connection" in erro_str:
            print("üí° Problema de conectividade")
            print("   ‚Üí Verifique sua conex√£o com a internet")
        else:
            print(f"üí° Erro espec√≠fico: {e}")

        return False


def main():
    """Fun√ß√£o principal para uso como script"""
    sucesso = teste_rapido_openai()

    if sucesso:
        print("\nüöÄ Tudo pronto! Configura√ß√£o otimizada:")
        print("   ‚úÖ API OpenAI funcionando")
        print("   ‚úÖ Modelo econ√¥mico (gpt-4o-mini) configurado")
        print("   ‚úÖ Valida√ß√µes de seguran√ßa ativas")
        print("\nüìã Pr√≥ximos passos:")
        print("   uv run hello-crewai")
        print("   python -m curso_crewai.hello_crewai")
    else:
        print("\nüîß Resolva os problemas acima antes de continuar")
        print("üí° Para mais ajuda, consulte: docs/CONFIGURACAO_AMBIENTE.md")


if __name__ == "__main__":
    main()
