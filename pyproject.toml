[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "curso-crewai"
version = "0.1.0"
description = "Curso Básico de 20 Horas: Desenvolvendo Chatbots com Múltiplos Agentes usando CrewAI e OpenAI"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Curso CrewAI", email = "curso@example.com"}
]
maintainers = [
    {name = "Curso CrewAI", email = "curso@example.com"}
]
keywords = ["crewai", "openai", "chatbot", "ai", "agents", "curso"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.10"

# Dependências principais
dependencies = [
    "beautifulsoup4>=4.13.4",
    "crewai>=0.95.0",
    "lxml>=6.0.1",
    "openai>=1.12.0",
    "python-dotenv>=1.0.0",
    "requests>=2.32.4",
    "selenium>=4.35.0",
]

# Dependências opcionais organizadas por grupos
[project.optional-dependencies]
# Desenvolvimento
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]

# Interface web
web = [
    "streamlit>=1.28.0",
    "flask>=2.3.0",
]

# Ferramentas extras
tools = [
    "requests>=2.31.0",
    "pydantic>=2.5.0",
    "rich>=13.0.0",
]

# Todas as dependências opcionais
all = [
    "curso-crewai[dev,web,tools]"
]

[project.urls]
Homepage = "https://github.com/exemplo/curso-crewai"
Documentation = "https://github.com/exemplo/curso-crewai/blob/main/README.md"
Repository = "https://github.com/exemplo/curso-crewai.git"
Issues = "https://github.com/exemplo/curso-crewai/issues"

# Scripts de linha de comando
[project.scripts]
hello-crewai = "curso_crewai.hello_crewai:main"
teste-api = "curso_crewai.teste_api:main"
configurar-crewai = "curso_crewai.configurar:main"

# Configuração do hatchling
[tool.hatch.build.targets.wheel]
packages = ["src/curso_crewai"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/README.md",
    "/LICENSE",
    "/pyproject.toml",
]

# Configuração do Black (formatador)
[tool.black]
line-length = 88
target-version = ["py38", "py39", "py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Configuração do isort (organizador de imports)
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["curso_crewai"]

# Configuração do pytest
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=curso_crewai",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "-v"
]

# Configuração do mypy (type checker)
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "crewai.*",
    "openai.*",
]
ignore_missing_imports = true

# Configuração do coverage
[tool.coverage.run]
source = ["src/curso_crewai"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
