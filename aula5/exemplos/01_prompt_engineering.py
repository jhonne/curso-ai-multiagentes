#!/usr/bin/env python3
"""
Exemplo 1: T√©cnicas Avan√ßadas de Prompt Engineering
Demonstra como otimizar prompts para diferentes cen√°rios
"""

from dotenv import load_dotenv
from crewai import Agent, Task, Crew
import time

load_dotenv()


class PromptEngineer:
    """Classe para demonstrar t√©cnicas de prompt engineering"""

    @staticmethod
    def prompt_basico():
        """Exemplo de prompt b√°sico (n√£o otimizado)"""
        return "Analise este texto e me d√™ feedback"

    @staticmethod
    def prompt_few_shot():
        """T√©cnica Few-Shot Learning"""
        return """
        Voc√™ √© um especialista em an√°lise de sentimento. 
        Analise o texto e classifique como POSITIVO, NEGATIVO ou NEUTRO.
        
        EXEMPLOS:
        Texto: "Adorei o produto, superou minhas expectativas!"
        An√°lise: POSITIVO - Cliente demonstra alta satisfa√ß√£o
        
        Texto: "O produto √© ok, nada demais"
        An√°lise: NEUTRO - Satisfa√ß√£o moderada, sem entusiasmo
        
        Texto: "Produto terr√≠vel, n√£o recomendo"
        An√°lise: NEGATIVO - Cliente insatisfeito
        
        Agora analise o seguinte texto:
        """

    @staticmethod
    def prompt_chain_of_thought():
        """T√©cnica Chain of Thought"""
        return """
        Voc√™ √© um analista de dados especializado. Analise o feedback do cliente seguindo este processo:
        
        PASSO 1: Identifique as palavras-chave principais
        PASSO 2: Determine o tom emocional
        PASSO 3: Extraia pontos espec√≠ficos mencionados
        PASSO 4: Classifique a satisfa√ß√£o (1-5)
        PASSO 5: Sugira a√ß√µes baseadas na an√°lise
        
        Texto para an√°lise:
        """

    @staticmethod
    def prompt_otimizado_tokens():
        """Prompt otimizado para reduzir tokens"""
        return """
        Analise o feedback. Formato:
        Sentimento: [POSITIVO/NEGATIVO/NEUTRO]
        Nota: [1-5]
        A√ß√£o: [resumo em 10 palavras]
        
        Texto:
        """


def demonstrar_prompts():
    """Demonstra diferentes t√©cnicas de prompt"""

    # Texto de exemplo para an√°lise
    texto_exemplo = """
    Comprei este smartphone h√° uma semana. A qualidade da c√¢mera √© excelente,
    muito melhor que meu celular anterior. Por√©m, a bateria n√£o dura nem um dia
    inteiro, o que √© muito frustrante. O atendimento ao cliente foi prestativo
    quando entrei em contato. No geral, estou satisfeito mas esperava mais.
    """

    print("üìù DEMONSTRA√á√ÉO: T√âCNICAS DE PROMPT ENGINEERING")
    print("=" * 60)

    # Prompt b√°sico
    print("\n‚ùå PROMPT B√ÅSICO:")
    print(PromptEngineer.prompt_basico())
    print("Problema: Muito vago, pode gerar respostas inconsistentes")

    # Few-shot learning
    print("\n‚úÖ PROMPT FEW-SHOT:")
    print(PromptEngineer.prompt_few_shot()[:200] + "...")
    print("Vantagem: Fornece exemplos claros do formato esperado")

    # Chain of thought
    print("\n‚úÖ PROMPT CHAIN-OF-THOUGHT:")
    print(PromptEngineer.prompt_chain_of_thought()[:200] + "...")
    print("Vantagem: Guia o racioc√≠nio passo a passo")

    # Otimizado para tokens
    print("\n‚úÖ PROMPT OTIMIZADO (TOKENS):")
    print(PromptEngineer.prompt_otimizado_tokens())
    print("Vantagem: Reduz custos mantendo qualidade")

    return texto_exemplo


def criar_agente_com_prompt_otimizado():
    """Cria um agente usando prompt otimizado"""

    prompt_otimizado = """
    Voc√™ √© um Analista de Feedback especializado em e-commerce.
    
    OBJETIVO: Extrair insights acion√°veis de feedback de clientes
    
    M√âTODO:
    1. Identifique aspectos mencionados (produto, entrega, atendimento)
    2. Avalie sentimento para cada aspecto (positivo/negativo/neutro)
    3. Priorize a√ß√µes necess√°rias
    
    FORMATO DE RESPOSTA:
    ‚Ä¢ Resumo: [uma linha]
    ‚Ä¢ Aspectos: [produto: sentimento, entrega: sentimento, ...]
    ‚Ä¢ Prioridade: [alta/m√©dia/baixa]
    ‚Ä¢ A√ß√£o: [uma a√ß√£o espec√≠fica]
    
    Seja conciso e espec√≠fico.
    """

    agente = Agent(
        role="Analista de Feedback",
        goal="Extrair insights acion√°veis de feedback de clientes",
        backstory=prompt_otimizado,
        verbose=True,
        llm_config={
            "model": "gpt-3.5-turbo",
            "temperature": 0.3,  # Baixa para consist√™ncia
            "max_tokens": 300,  # Limitado para ser conciso
        },
    )

    return agente


def testar_agente_otimizado():
    """Testa o agente com prompt otimizado"""

    print("\nü§ñ TESTANDO AGENTE COM PROMPT OTIMIZADO")
    print("=" * 50)

    # Feedback de exemplo
    feedback = """
    O produto chegou rapidamente e bem embalado. A qualidade √© boa,
    mas o pre√ßo me pareceu um pouco alto. O atendimento por chat foi
    excelente, resolveram minha d√∫vida em 5 minutos. Recomendo!
    """

    agente = criar_agente_com_prompt_otimizado()

    task = Task(
        description=f"Analise este feedback de cliente: {feedback}",
        expected_output="An√°lise estruturada seguindo o formato definido",
        agent=agente,
    )

    crew = Crew(agents=[agente], tasks=[task], verbose=True)

    print("üìä Executando an√°lise...")
    start_time = time.time()

    try:
        result = crew.kickoff()
        execution_time = time.time() - start_time

        print(f"\n‚úÖ An√°lise conclu√≠da em {execution_time:.2f}s")
        print(f"üìã Resultado:\n{result}")

    except Exception as e:
        print(f"‚ùå Erro na execu√ß√£o: {e}")


def main():
    """Fun√ß√£o principal"""
    print("üöÄ EXEMPLO 1: T√âCNICAS AVAN√áADAS DE PROMPT ENGINEERING")
    print("=" * 70)

    # Demonstra as t√©cnicas
    texto = demonstrar_prompts()

    # Testa agente otimizado
    testar_agente_otimizado()

    print("\nüí° DICAS IMPORTANTES:")
    print("1. Use exemplos espec√≠ficos (few-shot) para tarefas padronizadas")
    print("2. Estruture o racioc√≠nio (chain-of-thought) para an√°lises complexas")
    print("3. Limite tokens com formatos espec√≠ficos para reduzir custos")
    print(
        "4. Teste diferentes temperatures para balancear criatividade vs consist√™ncia"
    )
    print("\nüìö Pr√≥ximo: Execute 02_configuracao_modelos.py")


if __name__ == "__main__":
    main()
