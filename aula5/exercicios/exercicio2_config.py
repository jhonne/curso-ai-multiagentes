#!/usr/bin/env python3
"""
Exerc√≠cio 2: Configura√ß√£o de Modelos
Pratique configura√ß√£o de par√¢metros OpenAI para diferentes cen√°rios
"""

from dotenv import load_dotenv
from crewai import Agent, Task, Crew
import time

load_dotenv()


def exercicio_2a_configurar_por_cenario():
    """
    EXERC√çCIO 2A: Configure agentes para diferentes cen√°rios

    TAREFA:
    1. Crie 3 agentes com configura√ß√µes espec√≠ficas:
       - Agente para brainstorming (alta criatividade)
       - Agente para an√°lise financeira (precis√£o)
       - Agente para atendimento ao cliente (equilibrado)
    2. Teste cada um com tarefas apropriadas
    3. Compare os resultados
    """

    print("üèãÔ∏è EXERC√çCIO 2A: Configura√ß√µes por Cen√°rio")
    print("=" * 50)

    # TODO: Implemente os 3 agentes com configura√ß√µes apropriadas

    # CEN√ÅRIO 1: Brainstorming - precisa de criatividade
    agente_brainstorm = None  # TODO: Configure com temperature alta

    # CEN√ÅRIO 2: An√°lise financeira - precisa de precis√£o
    agente_financeiro = None  # TODO: Configure com temperature baixa

    # CEN√ÅRIO 3: Atendimento - precisa ser equilibrado
    agente_atendimento = None  # TODO: Configure balanceado

    # Tarefas de teste
    tarefas = [
        ("brainstorm", "Crie 5 ideias inovadoras para app de delivery"),
        ("financeiro", "Analise: Receita 100k, Custos 75k, Lucro 25k"),
        ("atendimento", "Responda: Cliente reclamando de entrega atrasada"),
    ]

    # TODO: Execute e compare resultados
    print("‚ùå EXERC√çCIO N√ÉO IMPLEMENTADO")
    print("üí° DICA: Use temperature 0.9+ para criativo, 0.1- para an√°lise")


def exercicio_2b_sistema_fallback():
    """
    EXERC√çCIO 2B: Implemente sistema de fallback

    TAREFA:
    1. Crie uma fun√ß√£o que tenta GPT-4 primeiro
    2. Se falhar, use GPT-3.5-turbo como fallback
    3. Se falhar novamente, use resposta padr√£o
    4. Registre qual m√©todo foi usado
    """

    print("\nüèãÔ∏è EXERC√çCIO 2B: Sistema de Fallback")
    print("=" * 40)

    def executar_com_fallback(prompt, config_primary, config_fallback):
        """
        TODO: Implemente sistema de fallback

        Args:
            prompt: Texto para processar
            config_primary: Configura√ß√£o prim√°ria (GPT-4)
            config_fallback: Configura√ß√£o de fallback (GPT-3.5)

        Returns:
            dict: {resultado: str, metodo_usado: str, sucesso: bool}
        """
        # TODO: Implementar l√≥gica de fallback
        pass

    # TODO: Teste o sistema
    print("‚ùå EXERC√çCIO N√ÉO IMPLEMENTADO")
    print("üí° DICA: Use try/except para capturar falhas de API")


def exercicio_2c_otimizacao_custos():
    """
    EXERC√çCIO 2C: Otimiza√ß√£o de custos

    TAREFA:
    1. Calcule custo de diferentes configura√ß√µes
    2. Compare GPT-4 vs GPT-3.5-turbo para mesma tarefa
    3. Encontre configura√ß√£o que balance qualidade e custo
    4. Implemente monitoramento de gastos
    """

    print("\nüèãÔ∏è EXERC√çCIO 2C: Otimiza√ß√£o de Custos")
    print("=" * 45)

    # Pre√ßos por 1K tokens (valores de exemplo)
    precos = {
        "gpt-4": {"input": 0.03, "output": 0.06},
        "gpt-3.5-turbo": {"input": 0.0015, "output": 0.002},
    }

    def calcular_custo(modelo, tokens_input, tokens_output):
        """TODO: Implemente c√°lculo de custo"""
        # TODO: Calcular custo baseado nos pre√ßos
        pass

    def comparar_modelos(prompt, tokens_estimados_input, tokens_estimados_output):
        """TODO: Compare custos entre modelos"""
        # TODO: Calcular e comparar custos
        pass

    # TODO: Teste com diferentes cen√°rios
    print("‚ùå EXERC√çCIO N√ÉO IMPLEMENTADO")
    print("üí° DICA: GPT-4 √© ~20x mais caro que GPT-3.5")


# ============================================================================
# SOLU√á√ïES DE EXEMPLO
# ============================================================================


def solucao_exercicio_2a():
    """SOLU√á√ÉO do Exerc√≠cio 2A"""

    print("‚úÖ SOLU√á√ÉO 2A: Configura√ß√µes por Cen√°rio")
    print("=" * 50)

    # Agente para brainstorming - alta criatividade
    agente_brainstorm = Agent(
        role="Especialista em Brainstorming",
        goal="Gerar ideias criativas e inovadoras",
        backstory="Expert em pensamento criativo e inova√ß√£o disruptiva",
        verbose=False,
        llm_config={
            "model": "gpt-4",
            "temperature": 0.9,  # Alta criatividade
            "max_tokens": 1500,  # Respostas mais elaboradas
            "top_p": 0.9,
            "frequency_penalty": 0.5,  # Evita repeti√ß√µes
        },
    )

    # Agente para an√°lise financeira - alta precis√£o
    agente_financeiro = Agent(
        role="Analista Financeiro",
        goal="Analisar dados financeiros com precis√£o",
        backstory="Especialista em an√°lise financeira rigorosa e precisa",
        verbose=False,
        llm_config={
            "model": "gpt-3.5-turbo",
            "temperature": 0.1,  # Baixa variabilidade
            "max_tokens": 800,  # Respostas concisas
            "top_p": 0.1,  # Focado e determin√≠stico
            "frequency_penalty": 0.0,
        },
    )

    # Agente para atendimento - equilibrado
    agente_atendimento = Agent(
        role="Assistente de Atendimento",
        goal="Fornecer suporte amig√°vel e eficiente",
        backstory="Especialista em atendimento ao cliente emp√°tico e eficaz",
        verbose=False,
        llm_config={
            "model": "gpt-3.5-turbo",
            "temperature": 0.7,  # Equilibrado
            "max_tokens": 400,  # Respostas diretas
            "top_p": 0.8,
            "frequency_penalty": 0.3,
        },
    )

    # Testa cada agente
    testes = [
        (
            agente_brainstorm,
            "Crie 5 ideias inovadoras para app de delivery",
            "Lista de ideias criativas",
        ),
        (
            agente_financeiro,
            "Analise: Receita 100k, Custos 75k, Lucro 25k. Est√° saud√°vel?",
            "An√°lise financeira objetiva",
        ),
        (
            agente_atendimento,
            "Responda: Cliente reclamando de entrega atrasada",
            "Resposta emp√°tica e solucionadora",
        ),
    ]

    for i, (agente, tarefa, output) in enumerate(testes, 1):
        print(f"\nü§ñ Teste {i}: {agente.role}")
        print(
            f"   Config: {agente.llm_config['model']}, temp={agente.llm_config['temperature']}"
        )

        task = Task(description=tarefa, expected_output=output, agent=agente)

        crew = Crew(agents=[agente], tasks=[task], verbose=False)

        try:
            start_time = time.time()
            resultado = crew.kickoff()
            tempo = time.time() - start_time

            print(f"   ‚è±Ô∏è Tempo: {tempo:.2f}s")
            print(f"   üìù Resposta: {str(resultado)[:100]}...")
        except Exception as e:
            print(f"   ‚ùå Erro: {e}")


def solucao_exercicio_2b():
    """SOLU√á√ÉO do Exerc√≠cio 2B"""

    print("\n‚úÖ SOLU√á√ÉO 2B: Sistema de Fallback")
    print("=" * 40)

    def executar_com_fallback(descricao, output_esperado):
        """Sistema de fallback entre modelos"""

        configs = [
            {"model": "gpt-4", "temperature": 0.7, "max_tokens": 500},  # Prim√°rio
            {
                "model": "gpt-3.5-turbo",
                "temperature": 0.7,
                "max_tokens": 500,
            },  # Fallback
        ]

        for i, config in enumerate(configs):
            try:
                print(f"   üîÑ Tentativa {i+1}: {config['model']}")

                agente = Agent(
                    role="Agente com Fallback",
                    goal="Executar tarefa com sistema de fallback",
                    backstory="Agente resiliente com m√∫ltiplas op√ß√µes de modelo",
                    verbose=False,
                    llm_config=config,
                )

                task = Task(
                    description=descricao, expected_output=output_esperado, agent=agente
                )

                crew = Crew(agents=[agente], tasks=[task], verbose=False)

                # Simula falha no primeiro modelo (para demonstra√ß√£o)
                if i == 0:
                    import random

                    if random.random() < 0.7:  # 70% chance de simular falha
                        raise Exception("Rate limit exceeded (simulado)")

                resultado = crew.kickoff()

                return {
                    "sucesso": True,
                    "resultado": resultado,
                    "modelo_usado": config["model"],
                    "tentativa": i + 1,
                }

            except Exception as e:
                print(f"   ‚ùå Falha: {str(e)[:50]}")
                if i == len(configs) - 1:  # √öltima tentativa
                    return {
                        "sucesso": False,
                        "resultado": "Desculpe, sistema temporariamente indispon√≠vel",
                        "modelo_usado": "resposta_padrao",
                        "tentativa": i + 1,
                        "erro": str(e),
                    }
                continue

    # Teste do sistema
    print("üß™ Testando sistema de fallback...")
    resultado = executar_com_fallback(
        "Resuma: Vendas cresceram 15% no trimestre", "Resumo executivo"
    )

    print(f"\nüìä Resultado:")
    print(f"   Sucesso: {resultado['sucesso']}")
    print(f"   Modelo usado: {resultado['modelo_usado']}")
    print(f"   Tentativa: {resultado['tentativa']}")
    if resultado["sucesso"]:
        print(f"   Resposta: {str(resultado['resultado'])[:80]}...")


def main():
    """Fun√ß√£o principal"""
    print("üèãÔ∏è EXERC√çCIO 2: CONFIGURA√á√ÉO DE MODELOS")
    print("=" * 70)

    print("üìã EXERC√çCIOS PARA COMPLETAR:")
    print("2A. Configure agentes para diferentes cen√°rios")
    print("2B. Implemente sistema de fallback")
    print("2C. Otimize custos comparando modelos")
    print()

    # Execute os exerc√≠cios (inicialmente vazios)
    exercicio_2a_configurar_por_cenario()
    exercicio_2b_sistema_fallback()
    exercicio_2c_otimizacao_custos()

    print("\n" + "=" * 70)
    print("üîç QUER VER AS SOLU√á√ïES? Descomente as fun√ß√µes abaixo:")
    print("# solucao_exercicio_2a()")
    print("# solucao_exercicio_2b()")

    # Descomente para ver as solu√ß√µes:
    # solucao_exercicio_2a()
    # solucao_exercicio_2b()

    print("\nüí∞ TABELA DE CUSTOS (refer√™ncia):")
    print("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê")
    print("‚îÇ Modelo          ‚îÇ Input/1K    ‚îÇ Output/1K    ‚îÇ")
    print("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§")
    print("‚îÇ GPT-3.5-turbo   ‚îÇ $0.0015     ‚îÇ $0.002       ‚îÇ")
    print("‚îÇ GPT-4           ‚îÇ $0.03       ‚îÇ $0.06        ‚îÇ")
    print("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")


if __name__ == "__main__":
    main()
